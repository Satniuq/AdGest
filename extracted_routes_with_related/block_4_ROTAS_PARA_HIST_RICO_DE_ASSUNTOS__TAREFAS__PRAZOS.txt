==== BLOCO DE ROTAS EXTRAÍDO ====
Arquivo: app/routes.py
Bloco: ROTAS PARA HISTÓRICO DE ASSUNTOS, TAREFAS, PRAZOS (Linhas 975 a 1142)
================================================================================

@main.route('/history/assunto/<int:assunto_id>')
@login_required
def history_assunto(assunto_id):
    assunto = Assunto.query.get_or_404(assunto_id)
    
    assunto_history = []  # Não estamos utilizando o histórico do assunto

    # Calcula o total de horas de todas as tarefas associadas
    total_horas = sum([t.horas for t in assunto.tarefas.all()])

    # Histórico das tarefas associadas
    tasks_history = {}
    for tarefa in assunto.tarefas.all():
        tarefa_history = TarefaHistory.query.filter_by(tarefa_id=tarefa.id)\
                                            .order_by(TarefaHistory.changed_at.desc())\
                                            .all()
        tasks_history[tarefa.id] = tarefa_history

    # Comentários associados
    comments = Comment.query.filter_by(object_type='assunto', object_id=assunto_id)\
                            .order_by(Comment.created_at.desc())\
                            .all()
    # Instancia o formulário de comentário
    form = CommentForm()
    
    # Coleta os IDs dos usuários que alteraram as tarefas (para exibir os nicknames)
    user_ids = set()
    for t_hist_list in tasks_history.values():
        for hist in t_hist_list:
            user_ids.add(hist.changed_by)
    
    from app.models import User
    users = User.query.filter(User.id.in_(list(user_ids))).all()
    user_dict = {user.id: user for user in users}
    
    # Calcula o último update dentre as tarefas associadas
    last_update = None
    last_update_user_id = None
    for tarefa in assunto.tarefas.all():
        for hist in tasks_history.get(tarefa.id, []):
            if last_update is None or hist.changed_at > last_update:
                last_update = hist.changed_at
                last_update_user_id = hist.changed_by
    
    return render_template('history_assunto.html',
                           assunto=assunto,
                           history_entries=assunto_history,
                           tasks_history=tasks_history,
                           comments=comments,
                           form=form,
                           user_dict=user_dict,
                           total_horas=total_horas,
                           last_update=last_update,
                           last_update_user_id=last_update_user_id)


@main.route('/history/prazo/<int:prazo_id>')
@login_required
def history_prazo(prazo_id):
    prazo = PrazoJudicial.query.get_or_404(prazo_id)
    
    # Opcional: se houver histórico específico do prazo, pode ser carregado aqui
    # Para simplificar, vamos assumir que usaremos apenas informações registradas no próprio PrazoJudicial
    # Ou se houver PrazoHistory:
    prazo_history = PrazoHistory.query.filter_by(prazo_id=prazo.id)\
                                      .order_by(PrazoHistory.changed_at.desc())\
                                      .all()
    
    # Calcula o "total de horas" – pode ser o valor armazenado em prazo.horas
    total_horas = prazo.horas
    
    # Comentários associados ao prazo
    comments = Comment.query.filter_by(object_type='prazo', object_id=prazo.id)\
                            .order_by(Comment.created_at.desc())\
                            .all()
    form = CommentForm()
    
    # Coleta IDs dos usuários envolvidos no histórico (se houver)
    user_ids = set()
    for hist in prazo_history:
        user_ids.add(hist.changed_by)
    from app.models import User
    users = User.query.filter(User.id.in_(list(user_ids))).all()
    user_dict = { user.id: user for user in users }
    
    # Se desejar calcular o último update, de forma semelhante aos assuntos:
    last_update = None
    last_update_user_id = None
    for hist in prazo_history:
        if last_update is None or hist.changed_at > last_update:
            last_update = hist.changed_at
            last_update_user_id = hist.changed_by
    
    return render_template('history_prazo.html',
                           prazo=prazo,
                           prazo_history=prazo_history,
                           comments=comments,
                           form=form,
                           user_dict=user_dict,
                           total_horas=total_horas,
                           last_update=last_update,
                           last_update_user_id=last_update_user_id)

@main.route('/add_comment', methods=['POST'])
@login_required
def add_comment():
    object_type = request.form.get('object_type')
    object_id = request.form.get('object_id')
    comment_text = request.form.get('comment_text')
    if object_type and object_id and comment_text:
        comment = Comment(
            object_type=object_type,
            object_id=int(object_id),
            user_id=current_user.id,
            comment_text=comment_text
        )
        db.session.add(comment)
        db.session.commit()
        flash("Comentário adicionado.", "success")
        # Envia notificação para os usuários envolvidos conforme o tipo do objeto
        if object_type == 'assunto':
            # Carrega o assunto
            assunto = Assunto.query.get_or_404(object_id)

            # Identifica os usuários envolvidos: criador e os compartilhados
            compartilhados = list(assunto.shared_with)
            envolvidos = set([assunto.user])
            envolvidos.update(compartilhados)
            
            # Remove o usuário que fez o comentário
            envolvidos = [user for user in envolvidos if user.id != current_user.id]
            
            # Define a mensagem e o link (p. ex., para a página de histórico do assunto)
            mensagem = f"{current_user.nickname} adicionou um comentário no assunto '{assunto.nome_assunto}'."
            link = url_for('main.history_assunto', assunto_id=assunto.id)
            for user in envolvidos:
                criar_notificacao(user.id, "update", mensagem, link)
        
        elif object_type == 'prazo':
            # Carrega o prazo
            prazo = PrazoJudicial.query.get_or_404(object_id)

            # Identifica os usuários envolvidos: criador e os compartilhados do prazo
            compartilhados = list(prazo.shared_with)
            envolvidos = set([prazo.user])
            envolvidos.update(compartilhados)
            
            # Remove o usuário que comentou
            envolvidos = [user for user in envolvidos if user.id != current_user.id]
            
            # Define a mensagem e o link para o histórico do prazo
            mensagem = f"{current_user.nickname} adicionou um comentário no prazo '{prazo.assunto}' (Processo: {prazo.processo})."
            link = url_for('main.history_prazo', prazo_id=prazo.id)
            for user in envolvidos:
                criar_notificacao(user.id, "update", mensagem, link)
    else: 
        flash("Preencha todos os dados.", "danger")
    
    # Redireciona de volta para a página de histórico de acordo com o objeto
    if object_type == 'assunto':
        return redirect(url_for('main.history_assunto', assunto_id=object_id))
    elif object_type == 'prazo':
        return redirect(url_for('main.history_prazo', prazo_id=object_id))
    return redirect(url_for('main.dashboard'))



================================================================================

==== ARQUIVOS RELACIONADOS ====

-- Arquivo: app/templates\create_assunto.html --
{% extends "base.html" %}
{% block title %}Criar/Editar Assunto{% endblock %}
{% block content %}
  <h2>Criar/Editar Assunto</h2>
  <form method="POST">
    {{ form.hidden_tag() }}

    {% if form.errors %}
      <div class="alert alert-danger">
        <ul>
          {% for field, errors in form.errors.items() %}
            {% for error in errors %}
              <li>{{ field }}: {{ error }}</li>
            {% endfor %}
          {% endfor %}
        </ul>
      </div>
    {% endif %}

    <div class="mb-3">
      {{ form.client_existing.label }}<br>
      {{ form.client_existing(class="form-control") }}
    </div>
    <div class="mb-3">
      {{ form.client_new.label }}<br>
      {{ form.client_new(class="form-control") }}
    </div>
    <div class="mb-3">
      {{ form.nome_assunto.label }}<br>
      {{ form.nome_assunto(class="form-control") }}
    </div>
    <div class="mb-3">
      {{ form.due_date.label }}<br>
      {{ form.due_date(type="date", class="form-control") }}
    </div>
    <div class="mb-3">
      {{ form.sort_order.label }}<br>
      {{ form.sort_order(class="form-control") }}
    </div>
    <div>
      {{ form.submit(class="btn btn-primary") }}
    </div>
  </form>
  <p><a href="{{ url_for('main.dashboard') }}" class="btn btn-link">Voltar</a></p>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\create_tarefa.html --
{% extends "base.html" %}
{% import "macros.html" as macros %}
{% block title %}Criar Tarefa{% endblock %}
{% block content %}
<h2>Criar Tarefa para o Assunto: {{ assunto.nome_assunto }}</h2>
<form method="POST" class="needs-validation" novalidate>
  {{ form.hidden_tag() }}
  {{ macros.render_field(form.nome_tarefa) }}
  {{ macros.render_field(form.descricao) }}
  {{ macros.render_field(form.due_date) }}
  {{ macros.render_field(form.sort_order) }}
  {{ macros.render_field(form.horas) }}
  <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
</form>
<p><a href="{{ url_for('main.dashboard') }}" class="btn btn-link">Voltar</a></p>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\dashboard.html --
{% extends "base.html" %}
{% block title %}Dashboard{% endblock %}
{% block content %}

<div class="container my-4">
  <!-- Linha superior: 3 janelinhas colapsáveis + botões à direita -->
  <div class="row align-items-start mb-3">
    <!-- JANELINHA HOJE -->
    <div class="col-md-2">
      <div class="card">
        <!-- Cabeçalho colapsável -->
        <div class="card-header p-2">
          <button class="btn btn-sm btn-light text-dark w-100 fs-5 text-start"
                  type="button" data-bs-toggle="collapse"
                  data-bs-target="#collapseHoje"
                  aria-expanded="false"
                  aria-controls="collapseHoje">
            Hoje <i class="fa-solid fa-angle-down float-end"></i>
          </button>
        </div>        
        <!-- Corpo colapsado -->
        <div id="collapseHoje" class="collapse">
          <div class="card-body" style="max-height: 220px; overflow-y: auto;">
            <!-- Assuntos e Tarefas de HOJE -->
            {% for assunto in assuntos %}
              {% set tarefas_hoje = [] %}
              {% for tarefa in assunto.tarefas %}
                {% if tarefa.due_date and tarefa.due_date <= current_date %}
                  {% set _ = tarefas_hoje.append(tarefa) %}
                {% endif %}
              {% endfor %}
              {% set assunto_e_hoje = (assunto.due_date and assunto.due_date <= current_date) %}
              {% if assunto_e_hoje or tarefas_hoje|length > 0 %}
                <div class="mb-2">
                  <strong>{{ assunto.nome_assunto }}</strong> - <em>{{ assunto.client.name }}</em>
                  {% if assunto_e_hoje %}
                    {% if tarefas_hoje %}
                      <ul class="list-group mt-1">
                        {% for t in tarefas_hoje %}
                          <li class="list-group-item p-1">{{ t.nome_tarefa }}</li>
                        {% endfor %}
                      </ul>
                    {% else %}
                      <small class="text-muted">Nenhuma tarefa de hoje</small>
                    {% endif %}
                  {% else %}
                    <ul class="list-group mt-1">
                      {% for t in tarefas_hoje %}
                        <li class="list-group-item p-1">{{ t.nome_tarefa }}</li>
                      {% endfor %}
                    </ul>
                  {% endif %}
                </div>
              {% endif %}
            {% endfor %}

            <!-- Prazos de HOJE -->
            <h6 class="mt-2">Prazos</h6>
            {% for prazo in prazos %}
              {% if prazo.prazo and prazo.prazo <= current_date %}
                <div class="mb-2">
                  <strong>{{ prazo.assunto }}</strong> - <em>{{ prazo.client.name }}</em>
                </div>
              {% endif %}
            {% endfor %}
          </div>
        </div>
      </div>
    </div>

    <!-- JANELINHA AMANHÃ -->
    <div class="col-md-2">
      <div class="card">
        <div class="card-header p-2">
          <button class="btn btn-sm btn-light text-dark w-100 fs-5 text-start"
                  type="button" data-bs-toggle="collapse"
                  data-bs-target="#collapseAmanha"
                  aria-expanded="false"
                  aria-controls="collapseAmanha">
            Amanhã <i class="fa-solid fa-angle-down float-end"></i>
          </button>
        </div>
        <div id="collapseAmanha" class="collapse">
          <div class="card-body" style="max-height: 220px; overflow-y: auto;">
            <!-- Assuntos e Tarefas de AMANHÃ -->
            {% for assunto in assuntos %}
              {% set tarefas_amanha = [] %}
              {% for tarefa in assunto.tarefas %}
                {% if tarefa.due_date and tarefa.due_date == tomorrow_date %}
                  {% set _ = tarefas_amanha.append(tarefa) %}
                {% endif %}
              {% endfor %}
              {% set assunto_e_amanha = (assunto.due_date and assunto.due_date == tomorrow_date) %}
              {% if assunto_e_amanha or tarefas_amanha|length > 0 %}
                <div class="mb-2">
                  <strong>{{ assunto.nome_assunto }}</strong> - <em>{{ assunto.client.name }}</em>
                  {% if assunto_e_amanha %}
                    {% if tarefas_amanha %}
                      <ul class="list-group mt-1">
                        {% for t in tarefas_amanha %}
                          <li class="list-group-item p-1">{{ t.nome_tarefa }}</li>
                        {% endfor %}
                      </ul>
                    {% else %}
                      <small class="text-muted">Nenhuma tarefa para amanhã</small>
                    {% endif %}
                  {% else %}
                    <ul class="list-group mt-1">
                      {% for t in tarefas_amanha %}
                        <li class="list-group-item p-1">{{ t.nome_tarefa }}</li>
                      {% endfor %}
                    </ul>
                  {% endif %}
                </div>
              {% endif %}
            {% endfor %}

            <!-- Prazos de AMANHÃ -->
            <h6 class="mt-2">Prazos</h6>
            {% for prazo in prazos %}
              {% if prazo.prazo and prazo.prazo == tomorrow_date %}
                <div class="mb-2">
                  <strong>{{ prazo.assunto }}</strong> - <em>{{ prazo.client.name }}</em>
                </div>
              {% endif %}
            {% endfor %}
          </div>
        </div>
      </div>
    </div>

    <!-- JANELINHA DEPOIS -->
    <div class="col-md-2">
      <div class="card">
        <div class="card-header p-2">
          <button class="btn btn-sm btn-light text-dark w-100 fs-5 text-start"
                  type="button" data-bs-toggle="collapse"
                  data-bs-target="#collapseDepois"
                  aria-expanded="false"
                  aria-controls="collapseDepois">
            Depois <i class="fa-solid fa-angle-down float-end"></i>
          </button>
        </div>
        <div id="collapseDepois" class="collapse">
          <div class="card-body" style="max-height: 220px; overflow-y: auto;">
            <!-- Assuntos e Tarefas DEPOIS -->
            {% for assunto in assuntos %}
              {% set tarefas_depois = [] %}
              {% for tarefa in assunto.tarefas %}
                {% if not tarefa.due_date or tarefa.due_date > tomorrow_date %}
                  {% set _ = tarefas_depois.append(tarefa) %}
                {% endif %}
              {% endfor %}
              {% set assunto_e_depois = (not assunto.due_date or assunto.due_date > tomorrow_date) %}
              {% if assunto_e_depois or tarefas_depois|length > 0 %}
                <div class="mb-2">
                  <strong>{{ assunto.nome_assunto }}</strong> - <em>{{ assunto.client.name }}</em>
                  {% if assunto_e_depois %}
                    {% if tarefas_depois %}
                      <ul class="list-group mt-1">
                        {% for t in tarefas_depois %}
                          <li class="list-group-item p-1">{{ t.nome_tarefa }}</li>
                        {% endfor %}
                      </ul>
                    {% else %}
                      <small class="text-muted">Nenhuma tarefa para depois</small>
                    {% endif %}
                  {% else %}
                    <ul class="list-group mt-1">
                      {% for t in tarefas_depois %}
                        <li class="list-group-item p-1">{{ t.nome_tarefa }}</li>
                      {% endfor %}
                    </ul>
                  {% endif %}
                </div>
              {% endif %}
            {% endfor %}

            <!-- Prazos DEPOIS -->
            <h6 class="mt-2">Prazos</h6>
            {% for prazo in prazos %}
              {% if not prazo.prazo or prazo.prazo > tomorrow_date %}
                <div class="mb-2">
                  <strong>{{ prazo.assunto }}</strong> - <em>{{ prazo.client.name }}</em>
                </div>
              {% endif %}
            {% endfor %}
          </div>
        </div>
      </div>
    </div>

    <!-- Coluna Botões à Direita -->
    <div class="col d-flex justify-content-end">
      <a href="{{ url_for('main.create_assunto') }}" class="btn btn-primary me-2">
        <i class="fa-solid fa-plus"></i> Criar Assunto
      </a>
      <a href="{{ url_for('main.create_prazo') }}" class="btn btn-secondary">
        <i class="fa-solid fa-plus"></i> Criar Prazo
      </a>
    </div>
  </div>

  <!-- Linha inferior: Assuntos e Prazos lado a lado -->
  <div class="row">
    <!-- Coluna Assuntos -->
    <div class="col-lg-8">
      <h4 class="mb-3">Assuntos</h4>
      <div id="assuntos-container" class="row row-cols-1 row-cols-lg-2 g-3">
        {% for assunto in assuntos %}
        <div class="col" data-id="{{ assunto.id }}">
          <div class="card h-100">
            <div class="card-header">
              <div class="d-flex justify-content-between align-items-center mb-1">
                <h5 class="mb-0 flex-grow-1" style="white-space: normal;">
                  {{ assunto.nome_assunto }}
                </h5>
              </div>
              <div class="d-flex justify-content-between align-items-center">
                <div class="dropdown">
                  <button class="btn btn-sm btn-light dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fa-solid fa-share-nodes"></i>
                    {{ assunto.user.nickname }}{% for usuario in assunto.shared_with %} / {{ usuario.nickname }}{% endfor %}
                  </button>
                  <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                      <a class="dropdown-item" href="{{ url_for('main.share_assunto', assunto_id=assunto.id) }}">
                        <i class="fa-solid fa-share-nodes"></i> Compartilhar
                      </a>
                    </li>
                  </ul>
                </div>                                             
                <div class="d-flex align-items-center gap-2">
                  <!-- Botão Concluir -->
                  <form action="{{ url_for('main.toggle_status_assunto', assunto_id=assunto.id) }}" method="POST" class="d-inline">
                    <button type="submit" class="btn btn-sm btn-success" title="Concluir">
                      <i class="fa-solid fa-check"></i>
                    </button>
                  </form>
                  <!-- Botão Editar -->
                  <a href="{{ url_for('main.edit_assunto', assunto_id=assunto.id) }}" class="btn btn-sm btn-warning" title="Editar">
                    <i class="fa-solid fa-pen-to-square"></i>
                  </a>
                  <!-- Botão Excluir -->
                  <form action="{{ url_for('main.delete_assunto', assunto_id=assunto.id) }}" method="POST" class="d-inline">
                    <button type="submit" class="btn btn-sm btn-danger" title="Excluir">
                      <i class="fa-solid fa-trash"></i>
                    </button>
                  </form>
                  <!-- Botão Histórico -->
                  <a href="{{ url_for('main.history_assunto', assunto_id=assunto.id) }}" class="btn btn-sm btn-info" title="Histórico">
                    <i class="fa-solid fa-clock-rotate-left"></i>
                  </a>
                </div>
              </div>
            </div>
            <div class="card-body">
              {% set total_horas = 0 %}
              {% for tarefa in assunto.tarefas %}
                {% if tarefa.horas %}
                  {% set total_horas = total_horas + tarefa.horas %}
                {% endif %}
              {% endfor %}
              <p class="mb-2" style="white-space: normal;">
                <strong>Cliente:</strong> {{ assunto.client.name }} |
                <strong>Data:</strong>
                {% if assunto.due_date %}
                  {{ assunto.due_date.strftime('%d/%m/%Y') }}
                {% else %}
                  Sem data
                {% endif %}
                | <i class="fa-solid fa-clock"></i> {{ total_horas|default(0) }}h
              </p>
              <!-- Botão para mostrar Tarefas -->
              <button class="btn btn-primary mb-2" type="button" data-bs-toggle="collapse"
                      data-bs-target="#tarefas-{{ assunto.id }}" aria-expanded="false" aria-controls="tarefas-{{ assunto.id }}">
                <i class="fa-solid fa-eye"></i> Tarefas
              </button>
              <div class="collapse" id="tarefas-{{ assunto.id }}">
                <ul class="list-group mb-3">
                  {% for tarefa in assuntos_tarefas_visiveis[assunto.id] if not tarefa.is_completed %}
                  <li class="list-group-item">
                    <!-- Primeira linha: Botões principais -->
                    <div class="d-flex justify-content-between align-items-center mb-1">
                      <div class="flex-grow-1">
                        <strong>{{ tarefa.nome_tarefa }}</strong>
                        {% if tarefa.descricao %}
                          <em>({{ tarefa.descricao }})</em>
                        {% endif %}
                      </div>
                      <div class="d-flex gap-1">
                        <!-- Botão Concluir -->
                        <form action="{{ url_for('main.toggle_status_tarefa', tarefa_id=tarefa.id) }}" method="POST" class="d-inline">
                          <button type="submit" class="btn btn-sm btn-success" title="Concluir">
                            <i class="fa-solid fa-check"></i>
                          </button>
                        </form>
                        <!-- Botão Editar -->
                        <a href="{{ url_for('main.edit_tarefa', tarefa_id=tarefa.id) }}" class="btn btn-sm btn-warning" title="Editar">
                          <i class="fa-solid fa-pen-to-square"></i>
                        </a>
                        <!-- Botão Excluir -->
                        <form action="{{ url_for('main.delete_tarefa', tarefa_id=tarefa.id) }}" method="POST" class="d-inline">
                          <button type="submit" class="btn btn-sm btn-danger" title="Excluir">
                            <i class="fa-solid fa-trash"></i>
                          </button>
                        </form>
                      </div>
                    </div>
                    <!-- Segunda linha: Apenas o Botão Adicionar Horas -->
                    <div class="d-flex justify-content-end align-items-center gap-2 mt-2">
                      <button class="btn btn-sm btn-outline-secondary add-hours-tarefa"
                              data-tarefa-id="{{ tarefa.id }}" title="Adicionar Horas">
                        <i class="fa-solid fa-clock"></i> {{ tarefa.horas|default(0) }}h
                      </button>
                    </div>
                  </li>                  
                  {% else %}
                    <li class="list-group-item text-muted">Nenhuma tarefa pendente.</li>
                  {% endfor %}
                </ul>                
                <!-- Botão Criar Tarefa -->
                <a href="{{ url_for('main.create_tarefa', assunto_id=assunto.id) }}" class="btn btn-primary">
                  <i class="fa-solid fa-plus"></i> Criar Tarefa
                </a>
              </div>              
            </div>
          </div>
        </div>
        {% else %}
        <p class="text-muted">Nenhum assunto cadastrado.</p>
        {% endfor %}
      </div>
    </div>

    <!-- Coluna Prazos -->
    <div class="col-lg-4">
      <h4 class="mb-3">Prazos</h4>
      <div class="row row-cols-1 g-3">
        {% for prazo in prazos %}
        <div class="col">
          <!-- Dentro do card de cada prazo -->
          <div class="card h-100">
            <div class="card-header">
              <div class="d-flex justify-content-between align-items-center mb-1">
                <h5 class="mb-0 flex-grow-1" style="white-space: normal;">
                  {{ prazo.assunto }}
                </h5>
              </div>
              <div class="d-flex justify-content-between align-items-center">
                <div class="dropdown">
                  <button class="btn btn-sm btn-light dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fa-solid fa-share-nodes"></i>
                    {{ prazo.user.nickname }}
                    {% for usuario in prazo.shared_with %}
                      / {{ usuario.nickname }}
                    {% endfor %}
                  </button>
                  <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                      <a class="dropdown-item" href="{{ url_for('main.share_prazo', prazo_id=prazo.id) }}">
                        <i class="fa-solid fa-share-nodes"></i> Compartilhar
                      </a>
                    </li>
                  </ul>
                </div>                
                <div class="d-flex align-items-center gap-2">
                  <!-- Botão Concluir -->
                  <form action="{{ url_for('main.toggle_status_prazo', prazo_id=prazo.id) }}" method="POST" class="d-inline">
                    <button type="submit" class="btn btn-sm btn-success" title="Concluir">
                      <i class="fa-solid fa-check"></i>
                    </button>
                  </form>
                  <!-- Botão Editar -->
                  <a href="{{ url_for('main.edit_prazo', prazo_id=prazo.id) }}" class="btn btn-sm btn-warning" title="Editar">
                    <i class="fa-solid fa-pen-to-square"></i>
                  </a>
                  <!-- Botão Excluir -->
                  <form action="{{ url_for('main.delete_prazo', prazo_id=prazo.id) }}" method="POST" class="d-inline">
                    <button type="submit" class="btn btn-sm btn-danger" title="Excluir">
                      <i class="fa-solid fa-trash"></i>
                    </button>
                  </form>
                  <!-- Botão Histórico para Prazos -->
                  <a href="{{ url_for('main.history_prazo', prazo_id=prazo.id) }}" class="btn btn-sm btn-info" title="Histórico">
                    <i class="fa-solid fa-clock-rotate-left"></i>
                  </a>
                </div>
              </div>
            </div>
            <div class="card-body">
              <p class="card-text mb-2" style="white-space: normal;">
                <strong>Processo:</strong> {{ prazo.processo }} |
                <strong>Cliente:</strong> {{ prazo.client.name }} |
                <strong>Data:</strong>
                {% if prazo.prazo %}
                  {{ prazo.prazo.strftime('%d/%m/%Y') }}
                {% else %}
                  Sem data
                {% endif %}
              </p>
              <!-- Botão de Horas (Prazo) -->
              <div class="d-flex justify-content-end">
                <button class="btn btn-sm btn-outline-secondary add-hours-prazo"
                        data-prazo-id="{{ prazo.id }}" title="Adicionar Horas">
                  <i class="fa-solid fa-clock"></i> {{ prazo.horas|default(0) }}h
                </button>
              </div>
            </div>
          </div>
        </div>
        {% else %}
        <p class="text-muted">Nenhum prazo cadastrado.</p>
        {% endfor %}
      </div>
    </div>
  </div>
</div>

<!-- Modais e Scripts de Adicionar Horas -->
<div class="modal fade" id="modalHorasPrazo" tabindex="-1" aria-labelledby="modalHorasPrazoLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="formHorasPrazo" method="POST">
        <div class="modal-header">
          <h5 class="modal-title" id="modalHorasPrazoLabel">Adicionar Horas ao Prazo</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="inputHorasPrazo" class="form-label">Horas</label>
            <input type="number" step="0.1" class="form-control" id="inputHorasPrazo" name="horas" required>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="submit" class="btn btn-primary">Salvar</button>
        </div>
      </form>
    </div>
  </div>
</div>

<div class="modal fade" id="modalHorasTarefa" tabindex="-1" aria-labelledby="modalHorasTarefaLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="formHorasTarefa" method="POST">
        <div class="modal-header">
          <h5 class="modal-title" id="modalHorasTarefaLabel">Adicionar Horas à Tarefa</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="inputHorasTarefa" class="form-label">Horas</label>
            <input type="number" step="0.1" class="form-control" id="inputHorasTarefa" name="horas" required>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="submit" class="btn btn-primary">Salvar</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Sortable.js e Scripts "Adicionar Horas" -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    var containerAssuntos = document.getElementById('assuntos-container');
    if (containerAssuntos) {
      new Sortable(containerAssuntos, {
        animation: 150,
        onEnd: function (evt) {
          // Cria um array com a nova ordem de cada card
          var ordem = [];
          var cards = containerAssuntos.querySelectorAll('[data-id]');
          cards.forEach(function(card, index) {
            var assuntoId = card.getAttribute('data-id');
            ordem.push({ id: assuntoId, sort_order: index });
          });
          console.log("Nova ordem enviada:", ordem);
          
          // Envia a nova ordem para o servidor via fetch
          fetch('{{ url_for("main.update_assuntos_order") }}', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ ordem: ordem })
          })
          .then(response => response.json())
          .then(data => {
            console.log("Resposta do servidor:", data);
            if (data.status !== 'ok') {
              console.error('Erro ao atualizar ordem:', data.message);
            }
          })
          .catch(error => console.error('Erro na requisição:', error));
        }
      });
    }
    
    // Scripts para os modais "adicionar horas"
    const btnsHorasPrazo = document.querySelectorAll('.add-hours-prazo');
    btnsHorasPrazo.forEach(function(btn) {
      btn.addEventListener('click', function() {
        const prazoId = this.getAttribute('data-prazo-id');
        const form = document.getElementById('formHorasPrazo');
        form.action = '/prazo/add_hours/' + prazoId;
        document.getElementById('inputHorasPrazo').value = '';
        const modalHorasPrazo = new bootstrap.Modal(document.getElementById('modalHorasPrazo'));
        modalHorasPrazo.show();
      });
    });

    const btnsHorasTarefa = document.querySelectorAll('.add-hours-tarefa');
    btnsHorasTarefa.forEach(function(btn) {
      btn.addEventListener('click', function() {
        const tarefaId = this.getAttribute('data-tarefa-id');
        const form = document.getElementById('formHorasTarefa');
        form.action = '/tarefa/add_hours/' + tarefaId;
        document.getElementById('inputHorasTarefa').value = '';
        const modalHorasTarefa = new bootstrap.Modal(document.getElementById('modalHorasTarefa'));
        modalHorasTarefa.show();
      });
    });
  });
</script>

{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\edit_assunto.html --
{% extends "base.html" %}
{% import "macros.html" as macros %}
{% block title %}Editar Assunto{% endblock %}
{% block content %}
<h2>Editar Assunto</h2>
<form method="POST" action="{{ url_for('main.edit_assunto', assunto_id=assunto.id) }}" class="needs-validation" novalidate>
  {{ form.hidden_tag() }}
  {{ macros.render_field(form.client_existing) }}
  {{ macros.render_field(form.client_new) }}
  {{ macros.render_field(form.nome_assunto) }}
  {{ macros.render_field(form.due_date) }}
  {{ macros.render_field(form.sort_order) }}
  <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
</form>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\edit_prazo.html --
{% extends "base.html" %}
{% import "macros.html" as macros %}
{% block title %}Editar Prazo{% endblock %}
{% block content %}
<h2>Editar Prazo</h2>
<form method="POST" action="{{ url_for('main.edit_prazo', prazo_id=prazo.id) }}" class="needs-validation" novalidate>
  {{ form.hidden_tag() }}
  {{ macros.render_field(form.client_existing) }}
  {{ macros.render_field(form.client_new) }}
  {{ macros.render_field(form.assunto) }}
  {{ macros.render_field(form.processo) }}
  {{ macros.render_field(form.prazo) }}
  {{ macros.render_field(form.comentarios) }}
  {{ macros.render_field(form.horas) }}  {# Campo para inserir manualmente as horas #}
  <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
</form>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\edit_tarefa.html --
{% extends "base.html" %}
{% import "macros.html" as macros %}
{% block title %}Editar Tarefa{% endblock %}
{% block content %}
<h2>Editar Tarefa</h2>
<form method="POST" action="{{ url_for('main.edit_tarefa', tarefa_id=tarefa.id) }}" class="needs-validation" novalidate>
  {{ form.hidden_tag() }}
  {{ macros.render_field(form.nome_tarefa) }}
  {{ macros.render_field(form.descricao) }}
  {{ macros.render_field(form.due_date) }}
  {{ macros.render_field(form.sort_order) }}
  {{ macros.render_field(form.horas) }}
  <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
</form>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\history_assunto.html --
{% extends "base.html" %}
{% block title %}Histórico do Assunto: {{ assunto.nome_assunto }}{% endblock %}
{% block content %}
<div class="container my-4">
  <div class="row">
    <!-- Coluna da Esquerda: Informações e Histórico das Tarefas -->
    <div class="col-md-8">
      <h2>Histórico do Assunto: {{ assunto.nome_assunto }}</h2>

      <!-- Informações do Assunto em Linha -->
      <div class="card mb-3">
        <div class="card-body">
          <p>
            <strong>Cliente:</strong> {{ assunto.client.name }} |
            <strong>Criado em:</strong> {{ assunto.created_at.strftime('%d/%m/%Y %H:%M') if assunto.created_at else 'N/A' }} |
            <strong>Por:</strong> {{ assunto.user.nickname }} |
            <strong>Última Atualização:</strong>
            {% if last_update %}
              {{ last_update.strftime('%d/%m/%Y %H:%M') }}
            {% else %}
              N/A
            {% endif %} |
            <strong>Por:</strong>
            {% if last_update and last_update_user_id in user_dict %}
              {{ user_dict[last_update_user_id].nickname }}
            {% else %}
              N/A
            {% endif %} |
            <strong>Status:</strong> {% if assunto.is_completed %}Concluído{% else %}Aberto{% endif %} |
            <strong>Total Horas:</strong> {{ total_horas }}
          </p>
        </div>
      </div>


      <!-- Histórico das Tarefas Associadas -->
      <div class="mb-3">
        <h3>Histórico das Tarefas Associadas</h3>
        {% if assunto.tarefas.count() > 0 %}
          {% for tarefa in assunto.tarefas.all() %}
            <div class="card mb-2">
              <div class="card-header">
                Tarefa: {{ tarefa.nome_tarefa }}
              </div>
              <div class="card-body">
                <p>
                  <strong>Horas:</strong> {{ tarefa.horas }}h | 
                  <strong>Status:</strong> {% if tarefa.is_completed %}Concluída{% else %}Aberta{% endif %} | 
                  <strong>Criada em:</strong> {% if tarefa.created_at %}{{ tarefa.created_at.strftime('%d/%m/%Y %H:%M') }}{% else %}N/A{% endif %}
                </p>
                
                <!-- BOTÃO QUE MOSTRA/ESCONDE O HISTÓRICO DA TAREFA -->
                <button class="btn btn-secondary" type="button"
                        data-bs-toggle="collapse"
                        data-bs-target="#hist-tarefa-{{ tarefa.id }}"
                        aria-expanded="false"
                        aria-controls="hist-tarefa-{{ tarefa.id }}">
                  Ver Histórico
                </button>
                
                <!-- Conteúdo Collapsado: Histórico da Tarefa -->
                <div class="collapse mt-3" id="hist-tarefa-{{ tarefa.id }}">
                  {% set tarefa_hist = tasks_history[tarefa.id] %}
                  {% if tarefa_hist %}
                    <h5>Histórico da Tarefa</h5>
                    <ul class="list-group">
                      {% for hist in tarefa_hist %}
                        <li class="list-group-item">
                          <strong>{{ hist.change_type|capitalize }}</strong>
                          em {{ hist.changed_at.strftime('%d/%m/%Y %H:%M') }}
                          por usuário {{ user_dict[hist.changed_by].nickname if hist.changed_by in user_dict else 'Desconhecido' }}
                          {% if hist.snapshot %}
                            <div class="mt-2">
                              <small>Detalhes:</small>
                              {{ hist.snapshot | render_snapshot }}
                            </div>
                          {% endif %}
                        </li>
                      {% endfor %}
                    </ul>
                  {% else %}
                    <p class="text-muted">Sem histórico para esta tarefa.</p>
                  {% endif %}
                </div>
              </div>
            </div>
          {% endfor %}
        {% endif %}
      </div>
    </div>
    
    <!-- Coluna da Direita: Formulário + Comentários no mesmo card -->
    <div class="col-md-4">
      <div class="card">
        <div class="card-header">
          Comentário
        </div>
        <div class="card-body">
          <!-- Formulário de Comentário -->
          <form action="{{ url_for('main.add_comment') }}" method="POST">
            {{ form.hidden_tag() }}
            <input type="hidden" name="object_type" value="assunto">
            <input type="hidden" name="object_id" value="{{ assunto.id }}">
            <div class="mb-3">
              {{ form.comment_text.label(class="form-label") }}
              {{ form.comment_text(rows=3, class="form-control") }}
            </div>
            <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
          </form>
        </div>

        {% if comments %}
        <!-- Linha divisória e seção para os comentários -->
        <hr class="my-0">
        <div class="card-body">
          <h6>Comentários Registrados</h6>
          <ul class="list-group list-group-flush">
            {% for comment in comments %}
              <li class="list-group-item">
                {{ comment.user.nickname }} 
                | {{ comment.created_at.strftime('%d/%m/%Y %H:%M') }} 
                | {{ comment.comment_text }}
              </li>
            {% endfor %}
          </ul>
        </div>
        {% else %}
        <!-- Se não houver comentários, pode exibir algo enxuto ou simplesmente omitir esse bloco -->
        <hr class="my-0">
        <div class="card-body">
          <h6>Comentários Registrados</h6>
          <p class="text-muted">Nenhum comentário registrado.</p>
        </div>
        {% endif %}
      </div>
    </div>

  </div><!-- Fim da row -->
</div><!-- Fim da container -->
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\history_prazo.html --
{% extends "base.html" %}
{% block title %}Histórico do Prazo: {{ prazo.assunto }}{% endblock %}
{% block content %}
<div class="container my-4">
  <div class="row">
    <!-- Coluna da Esquerda: Informações e Histórico do Prazo -->
    <div class="col-md-8">
      <h2>Histórico do Prazo: {{ prazo.assunto }} - {{ prazo.processo }}</h2>
      
      <!-- Informações do Prazo em Linha -->
      <div class="card mb-3">
        <div class="card-body">
          <p>
            <strong>Cliente:</strong> {{ prazo.client.name }} |
            <strong>Criado em:</strong> {{ prazo.created_at.strftime('%d/%m/%Y %H:%M') if prazo.created_at else 'N/A' }} |
            <strong>Por:</strong> {{ prazo.user.nickname }} |
            <strong>Última Atualização:</strong>
            {% if last_update %}
              {{ last_update.strftime('%d/%m/%Y %H:%M') }}
            {% else %}
              N/A
            {% endif %} |
            <strong>Por:</strong>
            {% if last_update and last_update_user_id in user_dict %}
              {{ user_dict[last_update_user_id].nickname }}
            {% else %}
              N/A
            {% endif %} |
            <strong>Status:</strong> {% if prazo.status %}Concluído{% else %}Pendente{% endif %} |
            <strong>Total Horas:</strong> {{ total_horas }}
          </p>
        </div>
      </div>
      
      <!-- Histórico de Alterações do Prazo -->
      <div class="mb-3">
        <h3>Histórico de Alterações</h3>
        {% if prazo_history %}
          <ul class="list-group">
            {% for hist in prazo_history %}
              <li class="list-group-item">
                <strong>{{ hist.change_type|capitalize }}</strong>
                em {{ hist.changed_at.strftime('%d/%m/%Y %H:%M') }}
                por usuário {{ user_dict[hist.changed_by].nickname if hist.changed_by in user_dict else 'Desconhecido' }}
                {% if hist.snapshot %}
                  <div class="mt-2">
                    <small>Detalhes:</small>
                    {{ hist.snapshot | render_snapshot }}
                  </div>
                {% endif %}
              </li>
            {% endfor %}
          </ul>
        {% else %}
          <p>Sem histórico de alterações para esse prazo.</p>
        {% endif %}
      </div>
    </div>
    
    <!-- Coluna da Direita: Formulário e Comentários -->
    <div class="col-md-4">
      <div class="card">
        <div class="card-header">
          Comentário
        </div>
        <div class="card-body">
          <form action="{{ url_for('main.add_comment') }}" method="POST">
            {{ form.hidden_tag() }}
            <input type="hidden" name="object_type" value="prazo">
            <input type="hidden" name="object_id" value="{{ prazo.id }}">
            <div class="mb-3">
              {{ form.comment_text.label(class="form-label") }}
              {{ form.comment_text(rows=3, class="form-control") }}
            </div>
            <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
          </form>
        </div>
        {% if comments %}
        <hr class="my-0">
        <div class="card-body">
          <h6>Comentários Registrados</h6>
          <ul class="list-group list-group-flush">
            {% for comment in comments %}
              <li class="list-group-item">
                {{ comment.user.nickname }} | {{ comment.created_at.strftime('%d/%m/%Y %H:%M') }} | {{ comment.comment_text }}
              </li>
            {% endfor %}
          </ul>
        </div>
        {% else %}
        <hr class="my-0">
        <div class="card-body">
          <h6>Comentários Registrados</h6>
          <p class="text-muted">Nenhum comentário registrado.</p>
        </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\prazos_judiciais.html --
{% extends "base.html" %}
{% import "macros.html" as macros %}
{% block title %}Criar Prazo Judicial{% endblock %}
{% block content %}
<h2>Criar Prazo Judicial</h2>
<form method="POST" class="needs-validation" novalidate>
  {{ form.hidden_tag() }}
  {{ macros.render_field(form.client_existing) }}
  {{ macros.render_field(form.client_new) }}
  {{ macros.render_field(form.assunto) }}
  {{ macros.render_field(form.processo) }}
  {{ macros.render_field(form.prazo) }}
  {{ macros.render_field(form.comentarios) }}
  <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
</form>
<p><a href="{{ url_for('main.dashboard') }}" class="btn btn-link">Voltar</a></p>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\share_assunto.html --
{% extends "base.html" %}
{% block title %}Compartilhar Assunto{% endblock %}
{% block content %}
  <h2>Compartilhar Assunto: {{ assunto.nome_assunto }}</h2>
  <form method="POST">
    {{ form.hidden_tag() }}
    <div class="mb-3">
      {{ form.shared_with.label }}<br>
      {{ form.shared_with(class="form-control") }}
    </div>
    <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
    <a href="{{ url_for('main.dashboard') }}" class="btn btn-link">Cancelar</a>
  </form>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\share_prazo.html --
{% extends "base.html" %}
{% block title %}Compartilhar Prazo{% endblock %}
{% block content %}
  <h2>Compartilhar Prazo: {{ prazo.assunto }}</h2>
  <form method="POST">
    {{ form.hidden_tag() }}
    <div class="mb-3">
      {{ form.shared_with.label }}<br>
      {{ form.shared_with(class="form-control") }}
    </div>
    <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
    <a href="{{ url_for('main.dashboard') }}" class="btn btn-link">Cancelar</a>
  </form>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\share_tarefa.html --
{% extends "base.html" %}
{% block title %}Compartilhar Tarefa{% endblock %}
{% block content %}
  <h2>Compartilhar Tarefa: {{ tarefa.nome_tarefa }}</h2>
  <form method="POST">
    {{ form.hidden_tag() }}
    <div class="mb-3">
      {{ form.shared_with.label }}<br>
      {{ form.shared_with(class="form-control") }}
    </div>
    <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
    <a href="{{ url_for('main.dashboard') }}" class="btn btn-link">Cancelar</a>
  </form>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/models.py --
# Tabela de associação para assuntos, prazos e clientes
shared_assuntos = db.Table('shared_assuntos',
    db.Column('user_id', db.Integer, db.ForeignKey('users.id')),
    db.Column('assunto_id', db.Integer, db.ForeignKey('assuntos.id'))
)

shared_prazos = db.Table('shared_prazos',
    db.Column('user_id', db.Integer, db.ForeignKey('users.id')),
    db.Column('prazo_id', db.Integer, db.ForeignKey('prazos_judiciais.id'))
)

shared_clients = db.Table('shared_clients',
    db.Column('user_id', db.Integer, db.ForeignKey('users.id')),
    db.Column('client_id', db.Integer, db.ForeignKey('clients.id'))
)

class Assunto(db.Model):
    __tablename__ = 'assuntos'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)  # Dono
    client_id = db.Column(db.Integer, db.ForeignKey('clients.id'), nullable=False)
    nome_assunto = db.Column(db.String(100), nullable=False)
    due_date = db.Column(db.Date, nullable=True)
    sort_order = db.Column(db.Integer, default=0)
    horas_assunto = db.Column(db.Float, default=0.0)
    is_completed = db.Column(db.Boolean, default=False)
    is_billed = db.Column(db.Boolean, default=False)
    completed_by = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, onupdate=datetime.utcnow)

    tarefas = db.relationship('Tarefa', backref='assunto', cascade="all, delete-orphan", lazy='dynamic')
    shared_with = db.relationship(
        'User',
        secondary=shared_assuntos,
        backref=db.backref('shared_assuntos', lazy='dynamic', overlaps="assuntos_compartilhados,compartilhados"),
        lazy='dynamic',
        overlaps="assuntos_compartilhados,compartilhados"
    )

    # RELACIONAMENTO PARA ACESSAR O DONO – certifique-se de que ESTÁ indentado dentro da classe
    user = db.relationship("User", backref="assuntos_criados", foreign_keys=lambda: [Assunto.__table__.c.user_id])

    def __repr__(self):
        return f'<Assunto {self.client.name} - {self.nome_assunto}>'

class Tarefa(db.Model):
    __tablename__ = 'tarefas'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    assunto_id = db.Column(db.Integer, db.ForeignKey('assuntos.id'), nullable=False)
    nome_tarefa = db.Column(db.String(100), nullable=False)
    descricao = db.Column(db.String(200), nullable=True)
    due_date = db.Column(db.Date, nullable=True)
    sort_order = db.Column(db.Integer, default=0)
    is_completed = db.Column(db.Boolean, default=False)
    horas = db.Column(db.Float, default=0.0)
    is_billed = db.Column(db.Boolean, default=False)
    data_conclusao = db.Column(db.Date, nullable=True)
    completed_by = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, onupdate=datetime.utcnow)

    user = db.relationship("User", backref="tarefas_criadas", foreign_keys=lambda: [Tarefa.__table__.c.user_id])

    def __repr__(self):
        return f'<Tarefa {self.nome_tarefa} (Assunto: {self.assunto.nome_assunto if self.assunto else "N/A"})>'


class PrazoJudicial(db.Model):
    __tablename__ = 'prazos_judiciais'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    client_id = db.Column(db.Integer, db.ForeignKey('clients.id'), nullable=False)
    assunto = db.Column(db.String(100), nullable=False)
    processo = db.Column(db.String(100), nullable=False)
    prazo = db.Column(db.Date, nullable=True)
    comentarios = db.Column(db.Text, nullable=True)
    status = db.Column(db.Boolean, default=False)
    horas = db.Column(db.Float, default=0.0)
    is_billed = db.Column(db.Boolean, default=False)
    data_conclusao = db.Column(db.Date, nullable=True)
    completed_by = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=True)
    client = db.relationship('Client', backref='prazos_judiciais')
    
    shared_with = db.relationship(
        'User',
        secondary=shared_prazos,
        backref=db.backref('shared_prazos', lazy='dynamic', overlaps="prazos_compartilhados,compartilhados"),
        lazy='dynamic',
        overlaps="prazos_compartilhados,compartilhados"
    )

    user = db.relationship("User", backref="prazos_criados", foreign_keys=lambda: [PrazoJudicial.__table__.c.user_id])

    def __repr__(self):
        return f'<PrazoJudicial {self.client.name} - {self.assunto}>'

# Hour Entry
class HourEntry(db.Model):
    __tablename__ = 'hour_entries'
    id = db.Column(db.Integer, primary_key=True)
    object_type = db.Column(db.String(20), nullable=False)  # 'tarefa' ou 'prazo'
    object_id = db.Column(db.Integer, nullable=False)
    hours = db.Column(db.Float, nullable=False)
    entry_date = db.Column(db.DateTime, default=datetime.utcnow)
    
    def __repr__(self):
        return f'<HourEntry {self.object_type}:{self.object_id} - {self.hours}h em {self.entry_date}>'

class AssuntoHistory(db.Model):
    __tablename__ = 'assuntos_history'
    id = db.Column(db.Integer, primary_key=True)
    assunto_id = db.Column(db.Integer, nullable=False)  # FK para o assunto original
    change_type = db.Column(db.String(20))  # 'created', 'updated', 'deleted'
    changed_at = db.Column(db.DateTime, default=datetime.utcnow)
    changed_by = db.Column(db.Integer, db.ForeignKey('users.id'))
    # Armazene as mudanças – pode ser um JSON com um snapshot ou somente os campos alterados
    snapshot = db.Column(db.JSON)  # Requer que seu banco suporte JSON

    def __repr__(self):
        return f"<Histórico Assunto {self.assunto_id} {self.change_type} em {self.changed_at}>"

class TarefaHistory(db.Model):
    __tablename__ = 'tarefas_history'
    id = db.Column(db.Integer, primary_key=True)
    tarefa_id = db.Column(db.Integer, nullable=False)  # FK para a tarefa
    change_type = db.Column(db.String(20), nullable=False)  # ex.: 'created', 'edited'
    changed_at = db.Column(db.DateTime, default=datetime.utcnow)
    changed_by = db.Column(db.Integer, db.ForeignKey('users.id'))
    snapshot = db.Column(db.JSON)  # ou db.Column(db.Text)

    def __repr__(self):
        return f"<TarefaHistory {self.tarefa_id} {self.change_type} em {self.changed_at}>"

class PrazoHistory(db.Model):
    __tablename__ = 'prazos_history'
    id = db.Column(db.Integer, primary_key=True)
    prazo_id = db.Column(db.Integer, nullable=False)  # FK para o prazo original
    change_type = db.Column(db.String(20))  # 'criado', 'editado', 'excluído', etc.
    changed_at = db.Column(db.DateTime, default=datetime.utcnow)
    changed_by = db.Column(db.Integer, db.ForeignKey('users.id'))
    snapshot = db.Column(db.JSON)  # Armazene as mudanças como JSON

    def __repr__(self):
        return f"<PrazoHistory {self.prazo_id} {self.change_type} em {self.changed_at}>"

class Comment(db.Model):
    __tablename__ = 'comments'
    id = db.Column(db.Integer, primary_key=True)
    object_type = db.Column(db.String(50))  # 'assunto', 'tarefa' ou 'prazo'
    object_id = db.Column(db.Integer, nullable=False)  # ID do assunto/tarefa/prazo
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    comment_text = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    user = db.relationship('User', backref='comments')

    def __repr__(self):
        return f"<Comment {self.id} em {self.object_type}:{self.object_id}>"

class HoraAdicao(db.Model):
    __tablename__ = 'horas_adicao'
    id = db.Column(db.Integer, primary_key=True)
    item_type = db.Column(db.String(20), nullable=False)  # 'assunto', 'tarefa' ou 'prazo'
    item_id = db.Column(db.Integer, nullable=False)
    horas_adicionadas = db.Column(db.Float, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

--------------------------------------------------------------------------------

-- Arquivo: app/forms.py --
class AssuntoForm(FlaskForm):
    client_existing = QuerySelectField(
        'Cliente Existente',
        query_factory=user_clients_query,  # Filtra clientes do usuário logado
        get_label='name',
        allow_blank=True,
        blank_text="-- Selecione um cliente --",
        validators=[Optional()]
    )
    client_new = StringField(
        'Novo Cliente (caso não haja existente)',
        validators=[Optional()]
    )
    nome_assunto = StringField('Assunto', validators=[DataRequired()])
    due_date = DateField('Data do Assunto', validators=[Optional()], format='%Y-%m-%d')
    sort_order = IntegerField('Ordem', validators=[Optional()])
    # Campo para seleção de usuários para partilha
    shared_with = QuerySelectMultipleField(
        'Compartilhar com',
        query_factory=usuarios_query,
        get_label='nickname',
        validators=[Optional()]
    )
    submit = SubmitField('Salvar Assunto')

    def validate(self, extra_validators=None):
        if not super().validate(extra_validators=extra_validators):
            return False
        if (not self.client_existing.data) and (not self.client_new.data or not self.client_new.data.strip()):
            msg = 'Por favor, selecione um cliente existente ou informe um novo cliente.'
            self.client_existing.errors.append(msg)
            self.client_new.errors.append(msg)
            return False
        return True

class ConcluirAssuntoForm(FlaskForm):
    horas = FloatField('Horas ao Concluir', validators=[Optional()])
    submit = SubmitField('Concluir Assunto')

class TarefaForm(FlaskForm):
    nome_tarefa = StringField('Nome da Tarefa', validators=[DataRequired()])
    descricao = StringField('Descrição (opcional)', validators=[Optional()])
    due_date = DateField('Data da Tarefa', validators=[Optional()], format='%Y-%m-%d')
    sort_order = IntegerField('Ordem', validators=[Optional()])
    horas = FloatField('Horas (opcional)', validators=[Optional()])
    
    submit = SubmitField('Salvar Tarefa')

class PrazoJudicialForm(FlaskForm):
    client_existing = QuerySelectField(
        'Cliente Existente',
        query_factory=user_clients_query,  # Filtra clientes do usuário logado
        get_label='name',
        allow_blank=True,
        blank_text="-- Selecione um cliente --",
        validators=[Optional()]
    )
    client_new = StringField(
        'Novo Cliente (caso não haja existente)',
        validators=[Optional()]
    )
    assunto = StringField('Assunto', validators=[DataRequired()])
    processo = StringField('Processo', validators=[DataRequired()])
    prazo = DateField('Prazo', validators=[Optional()], format='%Y-%m-%d')
    comentarios = TextAreaField('Comentários', validators=[Optional()])
    horas = FloatField('Horas', validators=[Optional()])
    shared_with = QuerySelectMultipleField(
        'Compartilhar com',
        query_factory=usuarios_query,
        get_label='nickname',
        validators=[Optional()]
    )
    submit = SubmitField('Salvar Prazo')

    def validate(self, extra_validators=None):
        if not super().validate(extra_validators=extra_validators):
            return False
        if not self.client_existing.data and (not self.client_new.data or not self.client_new.data.strip()):
            msg = 'Por favor, selecione um cliente existente ou informe um novo cliente.'
            self.client_existing.errors.append(msg)
            self.client_new.errors.append(msg)
            return False
        return True

class ShareForm(FlaskForm):
    shared_with = QuerySelectMultipleField(
        'Compartilhar com',
        query_factory=usuarios_query,
        get_label='nickname',
        validators=[Optional()]
    )
    submit = SubmitField('Atualizar Compartilhamento')

from flask_wtf import FlaskForm
from wtforms import TextAreaField, SubmitField
from wtforms.validators import DataRequired

class CommentForm(FlaskForm):
    comment_text = TextAreaField('Comentário', validators=[DataRequired()])
    submit = SubmitField('Comentar')

--------------------------------------------------------------------------------


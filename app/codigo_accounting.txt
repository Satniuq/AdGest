-- Conteúdo do ficheiro: C:\Python\AdGest\app\accounting\forms.py --
from flask_wtf import FlaskForm
from wtforms import StringField, FloatField, DateField, SelectField, TextAreaField, SubmitField, FileField
from wtforms.validators import DataRequired, Optional, ValidationError
from wtforms_sqlalchemy.fields import QuerySelectField
from app.models import Client
from flask_login import current_user

def user_clients_query():
    # Filtra apenas os clientes do usuário logado
    return Client.query.filter_by(user_id=current_user.id)

class InvoiceForm(FlaskForm):
    client_existing = QuerySelectField(
        'Cliente Existente',
        query_factory=user_clients_query,
        get_label='name',
        allow_blank=True,
        blank_text="-- Selecione um cliente --",
        validators=[Optional()]
    )
    client_new = StringField('Novo Cliente (caso não haja existente)', validators=[Optional()])

    numero = StringField('Número', validators=[DataRequired()])
    tipo = SelectField('Tipo', choices=[
        ('fatura','Fatura'), ('despesa','Despesa')
    ], validators=[DataRequired()])
    data_emissao = DateField('Data de Emissão', validators=[DataRequired()], format='%Y-%m-%d')
    valor = FloatField('Valor', validators=[DataRequired()])
    advogado = StringField('Advogado', validators=[Optional()])
    status = SelectField('Status', choices=[
        ('pendente', 'Pendente'),
        ('paga', 'Pago'),
        ('tentativa_cobranca', 'Tentativa de Cobrança'),
        ('em_tribunal', 'Em Tribunal'),
        ('incobravel', 'Incobrável')
    ], validators=[DataRequired()])
    data_vencimento = DateField('Data de Vencimento', validators=[Optional()], format='%Y-%m-%d')
    historico = TextAreaField('Histórico', validators=[Optional()])
    submit = SubmitField('Salvar')

    def validate(self, extra_validators=None):
        if not super().validate(extra_validators=extra_validators):
            return False
        # Se o user não escolheu um cliente existente E não preencheu um novo
        if not self.client_existing.data and not (self.client_new.data and self.client_new.data.strip()):
            msg = 'Por favor, selecione um cliente existente ou informe um novo cliente.'
            self.client_existing.errors.append(msg)
            self.client_new.errors.append(msg)
            return False
        return True

class UploadCSVForm(FlaskForm):
    csv_file = FileField('Arquivo CSV', validators=[DataRequired()])
    submit = SubmitField('Importar')
    
--------------------------------------------------------------------------------
-- Conteúdo do ficheiro: C:\Python\AdGest\app\accounting\routes.py --
import csv
import unicodedata
from io import StringIO
from datetime import datetime, date
from flask import render_template, redirect, url_for, flash, request, session, make_response
from app.accounting import accounting
from app.accounting.forms import InvoiceForm, UploadCSVForm
from app.models import NotaHonorarios, Client, DocumentoContabilistico, Notification
from app import db
from flask_login import login_required, current_user
from app.decorators import role_required
from sqlalchemy import func

@accounting.context_processor
def inject_notifications_accounting():
    if current_user.is_authenticated:
        notifs = Notification.query.filter_by(user_id=current_user.id)\
                                   .order_by(Notification.timestamp.desc()).all()
        unread = sum(1 for n in notifs if not n.is_read)
        return dict(notifications=notifs, unread_count=unread)
    return dict(notifications=[], unread_count=0)

@accounting.route('/manage', methods=['GET', 'POST'])
@login_required
@role_required(['contabilidade', 'backoffice', 'admin'])
def manage_invoices():
    form = InvoiceForm()
    query = DocumentoContabilistico.query.filter_by(user_id=current_user.id)
    
    # Parâmetros de filtro via GET:
    tipo = request.args.get('tipo', '')
    data_emissao = request.args.get('data_emissao', '')
    advogado = request.args.get('advogado', '')
    cliente_nome = request.args.get('cliente', '')
    status = request.args.get('status', '')
    dias_atraso = request.args.get('dias_atraso', '')
    numero_cliente = request.args.get('numero_cliente', '')
    ordenar_por = request.args.get('ordenar_por', 'created_at_desc')  # novo parâmetro

    if numero_cliente:
        query = query.filter(DocumentoContabilistico.numero_cliente.ilike(f"%{numero_cliente}%"))
    
    if tipo:
        query = query.filter(DocumentoContabilistico.tipo == tipo)
    if data_emissao:
        try:
            d = datetime.strptime(data_emissao, '%Y-%m-%d').date()
            query = query.filter(DocumentoContabilistico.created_at >= d)
        except ValueError:
            pass
    if advogado:
        query = query.filter(DocumentoContabilistico.advogado.ilike(f"%{advogado}%"))
    if cliente_nome:
        query = query.join(Client).filter(Client.name.ilike(f"%{cliente_nome}%"))
    if status:
        if status == 'pendente':
            query = query.filter(DocumentoContabilistico.status_cobranca.in_([
                'pendente', 'tentativa_cobranca', 'em_tribunal', 'incobravel'
            ]))
        else:
            query = query.filter(DocumentoContabilistico.status_cobranca == status)
    if dias_atraso:
        try:
            dias = int(dias_atraso)
            today = date.today()
            query = query.filter(func.coalesce(DocumentoContabilistico.data_vencimento, DocumentoContabilistico.data_emissao) != None)
            query = query.filter(
                func.julianday(today) - func.julianday(
                    func.coalesce(DocumentoContabilistico.data_vencimento, DocumentoContabilistico.data_emissao)
                ) <= dias
            )
        except ValueError:
            pass

    # Ordenação baseada no parâmetro "ordenar_por"
    if ordenar_por == 'data_emissao_asc':
        query = query.order_by(DocumentoContabilistico.data_emissao.asc())
    elif ordenar_por == 'data_emissao_desc':
        query = query.order_by(DocumentoContabilistico.data_emissao.desc())
    elif ordenar_por == 'data_vencimento_asc':
        query = query.order_by(DocumentoContabilistico.data_vencimento.asc())
    elif ordenar_por == 'data_vencimento_desc':
        query = query.order_by(DocumentoContabilistico.data_vencimento.desc())
    elif ordenar_por == 'valor_asc':
        query = query.order_by(DocumentoContabilistico.valor.asc())
    elif ordenar_por == 'valor_desc':
        query = query.order_by(DocumentoContabilistico.valor.desc())
    else:
        query = query.order_by(DocumentoContabilistico.created_at.desc())
    
    invoices = query.all()
    
    return render_template('accounting/manage_invoices.html', invoices=invoices, form=form, today=date.today(), ordenar_por=ordenar_por)


@accounting.route('/add_invoice', methods=['POST'])
@login_required
@role_required(['contabilidade', 'backoffice', 'admin'])
def add_invoice():
    form = InvoiceForm()
    if form.validate_on_submit():
        # Seleciona ou cria o cliente
        if form.client_existing.data:
            client = form.client_existing.data
        else:
            client_name = form.client_new.data.strip()
            client = Client.query.filter_by(user_id=current_user.id, name=client_name).first()
            if client:
                flash("Cliente já existente. Por favor, selecione-o na lista.", "danger")
                return redirect(url_for('accounting.manage_invoices'))
            else:
                client = Client(
                    user_id=current_user.id,
                    name=client_name
                )
                db.session.add(client)
                db.session.commit()  # Para gerar client.id

        # Apenas cria DocumentoContabilistico para tipos permitidos na inserção
        if form.tipo.data in ['fatura', 'despesa']:
            doc = DocumentoContabilistico(
                user_id=current_user.id,
                client_id=client.id,
                numero=form.numero.data,
                created_at=form.data_emissao.data,
                advogado=form.advogado.data,
                data_emissao=form.data_emissao.data,
                details=form.historico.data,
                valor=form.valor.data,
                is_confirmed=(form.status.data == 'paga'),
                tipo=form.tipo.data,
                data_vencimento=form.data_vencimento.data,
                # Novo atributo: número de cliente, obtido do cliente (pode ser None se não informado)
                numero_cliente=client.number_interno
            )
            db.session.add(doc)
        else:
            flash("Tipo de documento inválido.", "danger")
            return redirect(url_for('accounting.manage_invoices'))
        db.session.commit()

        flash('Documento inserido com sucesso!', 'success')
        return redirect(url_for('accounting.manage_invoices'))
    else:
        flash('Erro na validação da fatura.', 'danger')
        return redirect(url_for('accounting.manage_invoices'))

# Função para normalizar os cabeçalhos: converte para minúsculas e remove acentos
def normalize_header(header):
    header = header.strip().lower()
    header = unicodedata.normalize('NFKD', header).encode('ASCII', 'ignore').decode('utf-8')
    return header

# Função para tentar converter datas em vários formatos
def parse_date(date_str):
    if not date_str:
        return None
    for fmt in ('%d/%m/%Y', '%Y-%m-%d'):
        try:
            return datetime.strptime(date_str, fmt).date()
        except ValueError:
            continue
    return None

@accounting.route('/upload_csv', methods=['GET', 'POST'])
@login_required
@role_required(['contabilidade', 'backoffice', 'admin'])
def upload_csv():
    form = UploadCSVForm()
    if form.validate_on_submit():
        file = form.csv_file.data
        try:
            # Lê uma amostra do arquivo para detectar o delimitador
            sample = file.read(1024).decode('utf-8')
            file.seek(0)
            dialect = csv.Sniffer().sniff(sample)
            stream = StringIO(file.read().decode('utf-8'))
            reader = csv.DictReader(stream, dialect=dialect)
            
            # Normaliza os cabeçalhos e remove espaços extras dos valores
            registros = []
            for row in reader:
                normalized_row = {normalize_header(k): (v.strip() if v else v) for k, v in row.items()}
                registros.append(normalized_row)
            
            flash(f"{len(registros)} registros foram lidos com sucesso.", "success")
            # Armazena os registros na sessão para a pré-visualização
            session['csv_registros'] = registros
            return redirect(url_for('accounting.preview_csv'))
        except Exception as e:
            flash("Erro ao processar o arquivo: " + str(e), "danger")
    return render_template('accounting/upload_csv.html', form=form)

@accounting.route('/preview_csv', methods=['GET', 'POST'])
@login_required
@role_required(['contabilidade', 'backoffice', 'admin'])
def preview_csv():
    registros = session.get('csv_registros', [])
    if not registros:
        flash("Nenhum registro para pré-visualizar. Importe um arquivo primeiro.", "warning")
        return redirect(url_for('accounting.upload_csv'))

    errors = []
    from app.models import Client
    # Verificações para cada registro
    for idx, row in enumerate(registros, start=1):
        # Usa a chave normalizada: pode ser 'client' ou 'cliente'
        client_name = (row.get('client') or row.get('cliente') or '').strip()
        numero_cliente = (row.get('numero_cliente') or '').strip()
        if not client_name:
            errors.append(f"Linha {idx}: Nome do cliente está vazio.")
            continue
        
        # Busca pelo cliente pelo nome e pelo número (se informado)
        existing_client_by_name = Client.query.filter_by(name=client_name, user_id=current_user.id).first()
        existing_client_by_num = None
        if numero_cliente:
            existing_client_by_num = Client.query.filter_by(number_interno=numero_cliente, user_id=current_user.id).first()
        
        # Se o cliente já existe pelo nome e no banco já possui número diferente do CSV, erro
        if existing_client_by_name and numero_cliente:
            if existing_client_by_name.number_interno and existing_client_by_name.number_interno != numero_cliente:
                errors.append(f"Linha {idx}: Cliente '{client_name}' já existe com número '{existing_client_by_name.number_interno}', mas o CSV informa '{numero_cliente}'.")
        # Se o número já existe associado a outro cliente (nome diferente), erro
        if existing_client_by_num and existing_client_by_num.name.lower() != client_name.lower():
            errors.append(f"Linha {idx}: O número de cliente '{numero_cliente}' já pertence a '{existing_client_by_num.name}', mas o CSV indica '{client_name}'.")
    
    if request.method == 'POST':
        if errors:
            flash("Existem erros que precisam ser corrigidos antes de confirmar a importação.", "danger")
        else:
            # Em vez de redirecionar, renderize um template intermediário para confirmação
            return render_template('accounting/confirm_csv_import.html', registros=registros)
    
    return render_template('accounting/preview_csv.html', registros=registros, errors=errors)

@accounting.route('/confirm_csv_import', methods=['POST'])
@login_required
@role_required(['contabilidade', 'backoffice', 'admin'])
def confirm_csv_import():
    from app.models import DocumentoContabilistico, Client
    registros = session.get('csv_registros', [])
    if not registros:
        flash("Não há registros na sessão para importar.", "danger")
        return redirect(url_for('accounting.upload_csv'))
    # Remove os registros da sessão para evitar reimportação acidental
    session.pop('csv_registros', None)

    imported_count = 0
    try:
        for row in registros:
            # Usa a chave 'client' (ou 'cliente') normalizada para obter o nome do cliente
            client_name = row.get('client') or row.get('cliente')
            client_name = client_name.strip() if client_name else ''
            if not client_name:
                continue

            # Pega o número do cliente do CSV
            num_cliente = row.get('numero_cliente')
            
            # Procura o cliente pelo nome e usuário
            client = Client.query.filter_by(name=client_name, user_id=current_user.id).first()
            if not client:
                # Cria o cliente, atribuindo também o número, se fornecido
                client = Client(user_id=current_user.id, name=client_name, number_interno=num_cliente)
                db.session.add(client)
                db.session.flush()  # Gera client.id
            else:
                # Se o cliente já existe, atualiza o número se ele estiver vazio e o CSV fornecer um valor
                if num_cliente and not client.number_interno:
                    client.number_interno = num_cliente

            # Converte as datas (tenta vários formatos)
            data_emissao = parse_date(row.get('data_emissao'))
            data_vencimento = parse_date(row.get('data_vencimento'))

            try:
                valor = float(row.get('valor', '0'))
            except Exception:
                valor = 0.0

            doc = DocumentoContabilistico(
                user_id=current_user.id,
                client_id=client.id,
                numero=row.get('numero'),
                data_emissao=data_emissao,
                data_vencimento=data_vencimento,
                tipo=row.get('tipo', 'fatura'),  # Deve ser "fatura" ou "despesa"
                valor=valor,
                advogado=row.get('advogado'),
                details=row.get('historico'),
                status_cobranca=row.get('status', 'pendente'),
                numero_recibo=row.get('numero_recibo'),
                numero_cliente=row.get('numero_cliente'),
                is_confirmed=(row.get('status') == 'paga')
            )
            db.session.add(doc)
            imported_count += 1
        db.session.commit()
        flash(f"{imported_count} documentos importados com sucesso!", "success")
    except Exception as e:
        db.session.rollback()
        flash(f"Ocorreu um erro ao importar: {e}", "danger")
    return redirect(url_for('accounting.manage_invoices'))

@accounting.route('/contabilidade_cliente/<int:client_id>')
@login_required
def contabilidade_cliente(client_id):
    client = Client.query.get_or_404(client_id)
    contabil_docs = DocumentoContabilistico.query.filter(
        DocumentoContabilistico.client_id == client_id,
        DocumentoContabilistico.user_id == current_user.id
    ).order_by(DocumentoContabilistico.created_at.desc()).all()
    paid_docs = [doc for doc in contabil_docs if doc.is_confirmed]
    pending_docs = [doc for doc in contabil_docs if not doc.is_confirmed]
    return render_template(
        'accounting/contabilidade_cliente.html', 
        client=client, 
        paid_docs=paid_docs, 
        pending_docs=pending_docs, 
        today=date.today()
    )

@accounting.route('/documento/alterar_status/<int:doc_id>', methods=['POST'])
@login_required
def alterar_status_documento(doc_id):
    doc = DocumentoContabilistico.query.get_or_404(doc_id)

    if doc.user_id != current_user.id:
        flash("Não tens permissão para alterar este documento.", "danger")
        return redirect(url_for('accounting.contabilidade_cliente', client_id=doc.client_id))

    novo_status = request.form.get('status')
    numero_recibo = request.form.get('numero_recibo')

    if novo_status == 'paga':
        doc.is_confirmed = True
        doc.status_cobranca = 'paga'
        if numero_recibo:
            doc.numero_recibo = numero_recibo
    else:
        doc.is_confirmed = False
        doc.status_cobranca = novo_status

    db.session.commit()
    flash("Status do documento atualizado!", "success")
    return redirect(url_for('accounting.contabilidade_cliente', client_id=doc.client_id))

@accounting.route('/documento/edit/<int:doc_id>', methods=['GET', 'POST'])
@login_required
def edit_documento(doc_id):
    doc = DocumentoContabilistico.query.get_or_404(doc_id)
    if doc.user_id != current_user.id:
        flash("Não tens permissão para editar este documento.", "danger")
        return redirect(url_for('main.clientes'))
    
    form = InvoiceForm(obj=doc)
    
    # Se o documento já tem um client, defina no form.client_existing
    form.client_existing.data = doc.client  # Ajusta o QuerySelectField para o cliente atual

    if request.method == 'POST':
        if form.validate_on_submit():
            doc.numero = form.numero.data
            doc.tipo = form.tipo.data
            doc.data_emissao = form.data_emissao.data
            doc.data_vencimento = form.data_vencimento.data
            doc.valor = form.valor.data
            doc.advogado = form.advogado.data
            doc.status_cobranca = form.status.data
            doc.details = form.historico.data
            db.session.commit()
            flash("Documento atualizado com sucesso!", "success")
            return redirect(url_for('accounting.contabilidade_cliente', client_id=doc.client_id, modal=doc.id))
        else:
            flash(f"Erro ao validar o formulário: {form.errors}", "danger")
    return render_template('accounting/edit_documento.html', doc=doc, form=form)

@accounting.route('/relatorio_contabilidade')
@login_required
@role_required(['contabilidade', 'backoffice', 'admin'])
def relatorio_contabilidade():
    # Captura os mesmos filtros enviados por GET (como no manage_invoices)
    tipo = request.args.get('tipo', '')
    data_emissao = request.args.get('data_emissao', '')
    advogado = request.args.get('advogado', '')
    cliente_nome = request.args.get('cliente', '')
    status = request.args.get('status', '')
    dias_atraso = request.args.get('dias_atraso', '')
    numero_cliente = request.args.get('numero_cliente', '')
    ordenar_por = request.args.get('ordenar_por', 'created_at_desc')
    
    query = DocumentoContabilistico.query.filter_by(user_id=current_user.id)
    
    if numero_cliente:
        query = query.filter(DocumentoContabilistico.numero_cliente.ilike(f"%{numero_cliente}%"))
    if tipo:
        query = query.filter(DocumentoContabilistico.tipo == tipo)
    if data_emissao:
        try:
            d = datetime.strptime(data_emissao, '%Y-%m-%d').date()
            query = query.filter(DocumentoContabilistico.created_at >= d)
        except ValueError:
            pass
    if advogado:
        query = query.filter(DocumentoContabilistico.advogado.ilike(f"%{advogado}%"))
    if cliente_nome:
        query = query.join(Client).filter(Client.name.ilike(f"%{cliente_nome}%"))
    if status:
        if status == 'pendente':
            query = query.filter(DocumentoContabilistico.status_cobranca.in_([
                'pendente', 'tentativa_cobranca', 'em_tribunal', 'incobravel'
            ]))
        else:
            query = query.filter(DocumentoContabilistico.status_cobranca == status)
    if dias_atraso:
        try:
            dias = int(dias_atraso)
            today = date.today()
            query = query.filter(func.coalesce(DocumentoContabilistico.data_vencimento, DocumentoContabilistico.data_emissao) != None)
            query = query.filter(
                func.julianday(today) - func.julianday(
                    func.coalesce(DocumentoContabilistico.data_vencimento, DocumentoContabilistico.data_emissao)
                ) <= dias
            )
        except ValueError:
            pass

    if ordenar_por == 'data_emissao_asc':
        query = query.order_by(DocumentoContabilistico.data_emissao.asc())
    elif ordenar_por == 'data_emissao_desc':
        query = query.order_by(DocumentoContabilistico.data_emissao.desc())
    elif ordenar_por == 'data_vencimento_asc':
        query = query.order_by(DocumentoContabilistico.data_vencimento.asc())
    elif ordenar_por == 'data_vencimento_desc':
        query = query.order_by(DocumentoContabilistico.data_vencimento.desc())
    elif ordenar_por == 'valor_asc':
        query = query.order_by(DocumentoContabilistico.valor.asc())
    elif ordenar_por == 'valor_desc':
        query = query.order_by(DocumentoContabilistico.valor.desc())
    else:
        query = query.order_by(DocumentoContabilistico.created_at.desc())
    
    documentos = query.all()
    
    total_valor   = sum(doc.valor for doc in documentos)
    total_paid    = sum(doc.valor for doc in documentos if doc.status_cobranca == 'paga')
    total_unpaid  = sum(doc.valor for doc in documentos if doc.status_cobranca != 'paga')
    
    # Passa também os filtros aplicados para exibir no relatório
    filters = request.args
    
    return render_template('accounting/relatorio_contabilidade.html',
                           documentos=documentos,
                           total_valor=total_valor,
                           total_paid=total_paid,
                           total_unpaid=total_unpaid,
                           filters=filters)



--------------------------------------------------------------------------------
-- Conteúdo do ficheiro: C:\Python\AdGest\app\accounting\__init__.py --
# No __init__.py do accounting (sem template_folder)
from flask import Blueprint

accounting = Blueprint('accounting', __name__)

from app.accounting import routes


--------------------------------------------------------------------------------
-- Conteúdo do ficheiro: C:\Python\AdGest\app\accounting\__pycache__\forms.cpython-313.pyc --
Erro ao ler o ficheiro: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte

--------------------------------------------------------------------------------
-- Conteúdo do ficheiro: C:\Python\AdGest\app\accounting\__pycache__\models.cpython-313.pyc --
Erro ao ler o ficheiro: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte

--------------------------------------------------------------------------------
-- Conteúdo do ficheiro: C:\Python\AdGest\app\accounting\__pycache__\routes.cpython-313.pyc --
Erro ao ler o ficheiro: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte

--------------------------------------------------------------------------------
-- Conteúdo do ficheiro: C:\Python\AdGest\app\accounting\__pycache__\__init__.cpython-313.pyc --
Erro ao ler o ficheiro: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte

--------------------------------------------------------------------------------
-- Conteúdo do ficheiro: C:\Python\AdGest\app\templates\accounting\confirm_csv_import.html --
{% extends "base.html" %}
{% block title %}Confirmar Importação de Documentos Contábeis{% endblock %}

{% block content %}
<div class="container my-4">
  <h2>Confirmar Importação de Documentos</h2>
  <p>Revise os registros abaixo e confirme a importação:</p>
  <table class="table table-bordered">
    <thead>
      <tr>
        {% for col in registros[0].keys() %}
          <th>{{ col }}</th>
        {% endfor %}
      </tr>
    </thead>
    <tbody>
      {% for row in registros %}
        <tr>
          {% for col in row.keys() %}
            <td>{{ row[col] }}</td>
          {% endfor %}
        </tr>
      {% endfor %}
    </tbody>
  </table>
  <form method="POST" action="{{ url_for('accounting.confirm_csv_import') }}">
    {{ form.hidden_tag() if form is defined }}
    <button type="submit" class="btn btn-success">Confirmar Importação</button>
  </form>
</div>
{% endblock %}

--------------------------------------------------------------------------------
-- Conteúdo do ficheiro: C:\Python\AdGest\app\templates\accounting\contabilidade_cliente.html --
{% extends "base.html" %}
{% block title %}Contabilidade - {{ client.name }}{% endblock %}

{% block content %}
<div class="container my-4">
  <h2 class="text-center mb-4">Contabilidade - {{ client.name }}</h2>
  <div class="row">
    <!-- Coluna de Documentos Pagos Agrupados -->
    <div class="col-md-6">
      <h3>Documentos Pagos</h3>
      {% if paid_docs %}
        <div class="card mb-3">
          <div class="card-header d-flex justify-content-between align-items-center" style="min-height: 60px;">
            <span class="fs-5">Documentos Pagos ({{ paid_docs|length }})</span>
            <button class="btn btn-sm btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePaidDocs" aria-expanded="false" aria-controls="collapsePaidDocs">
              <i class="fa fa-chevron-down"></i> Expandir
            </button>
          </div>
          <div class="collapse" id="collapsePaidDocs">
            <div class="card-body">
              {% for doc in paid_docs %}
                <div class="card mb-2">
                  <div class="card-header d-flex justify-content-between align-items-center p-2">
                    <span><strong>{{ doc.tipo }}</strong> | #{{ doc.numero or doc.id }}</span>
                  </div>
                  <div class="card-body p-2">
                    <p class="m-0">
                      <strong>Adv:</strong> {{ doc.advogado or 'N/A' }} |
                      <strong>Data Emissão:</strong> {% if doc.data_emissao %}{{ doc.data_emissao.strftime('%d/%m/%Y') }}{% else %}N/A{% endif %} |
                      <strong>Descrição:</strong> {{ doc.details or '---' }} |
                      <strong>Recibo/NC:</strong> {{ doc.numero_recibo or '---' }} |
                      <strong>Valor (c/IVA):</strong> {{ doc.valor }} €
                    </p>
                  </div>
                  <div class="card-footer d-flex gap-2 justify-content-end p-2">
                    <button class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#modalStatus{{ doc.id }}">
                      <i class="fa fa-exchange-alt"></i> Status: {{ doc.status_cobranca }}
                    </button>
                    <a href="{{ url_for('accounting.edit_documento', doc_id=doc.id) }}" class="btn btn-sm btn-secondary">
                      <i class="fa fa-edit"></i> Editar
                    </a>
                  </div>
                </div>

                <!-- Modal para Alterar Status -->
                <div class="modal fade" id="modalStatus{{ doc.id }}" tabindex="-1" aria-labelledby="modalStatusLabel{{ doc.id }}" aria-hidden="true">
                  <div class="modal-dialog">
                    <div class="modal-content">
                      <form method="POST" action="{{ url_for('accounting.alterar_status_documento', doc_id=doc.id) }}">
                        <div class="modal-header">
                          <h5 class="modal-title" id="modalStatusLabel{{ doc.id }}">Alterar Status do Documento #{{ doc.numero or doc.id }}</h5>
                          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                          <label for="statusSelect{{ doc.id }}" class="form-label">Novo Status</label>
                          <select name="status" id="statusSelect{{ doc.id }}" class="form-select mb-3">
                            <option value="paga">Pago</option>
                            <option value="recibo">Recibo</option>
                            <option value="nota_credito">Nota de Crédito</option>
                            <option value="tentativa_cobranca">Tentativa de Cobrança</option>
                            <option value="em_tribunal">Em Tribunal</option>
                            <option value="incobravel">Incobrável</option>
                          </select>
                          <label for="numeroRecibo{{ doc.id }}" class="form-label">Nº Recibo / NC (opcional)</label>
                          <input type="text" name="numero_recibo" id="numeroRecibo{{ doc.id }}" class="form-control" placeholder="Ex: Recibo #1234">
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                          <button type="submit" class="btn btn-primary">Salvar</button>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              {% endfor %}
            </div>
          </div>
        </div>
      {% else %}
        <p>Nenhum documento pago encontrado.</p>
      {% endif %}
    </div>
    
    <!-- Coluna de Documentos Pendentes -->
    <div class="col-md-6">
      <h3>Documentos Pendentes</h3>
      {% if pending_docs %}
        {% for doc in pending_docs %}
          <div class="card mb-3">
            <div class="card-header d-flex justify-content-between align-items-center">
              <span><strong>{{ doc.tipo }}</strong> | #{{ doc.numero or doc.id }}</span>
            </div>
            <div class="card-body p-2">
              {% set atraso = 0 %}
              {% if doc.data_vencimento %}
                {% set atraso = (today - doc.data_vencimento).days if today > doc.data_vencimento else 0 %}
              {% endif %}
              <p class="m-0">
                <strong>Adv:</strong> {{ doc.advogado or 'N/A' }} |
                <strong>Data Emissão:</strong> {% if doc.data_emissao %}{{ doc.data_emissao.strftime('%d/%m/%Y') }}{% else %}N/A{% endif %} ||
                <strong>Descrição:</strong> {{ doc.details or '---' }} |
                <strong>Recibo/NC:</strong> {{ doc.numero_recibo or '---' }} |
                <strong>Valor (c/IVA):</strong> {{ doc.valor }} € |
                <strong>Dias Atraso:</strong> {{ atraso }}
              </p>
            </div>
            <div class="card-footer d-flex gap-2 justify-content-end">
              <button class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#modalStatus{{ doc.id }}">
                <i class="fa fa-exchange-alt"></i> Status: {{ doc.status_cobranca }}
              </button>
              <a href="{{ url_for('accounting.edit_documento', doc_id=doc.id) }}" class="btn btn-sm btn-secondary">
                <i class="fa fa-edit"></i> Editar
              </a>
            </div>
          </div>
          
          <!-- Modal para Alterar Status -->
          <div class="modal fade" id="modalStatus{{ doc.id }}" tabindex="-1" aria-labelledby="modalStatusLabel{{ doc.id }}" aria-hidden="true">
            <div class="modal-dialog">
              <div class="modal-content">
                <form method="POST" action="{{ url_for('accounting.alterar_status_documento', doc_id=doc.id) }}">
                  <div class="modal-header">
                    <h5 class="modal-title" id="modalStatusLabel{{ doc.id }}">Alterar Status do Documento #{{ doc.numero or doc.id }}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <label for="statusSelect{{ doc.id }}" class="form-label">Novo Status</label>
                    <select name="status" id="statusSelect{{ doc.id }}" class="form-select mb-3">
                      <option value="paga">Pago</option>
                      <option value="recibo">Recibo</option>
                      <option value="nota_credito">Nota de Crédito</option>
                      <option value="tentativa_cobranca">Tentativa de Cobrança</option>
                      <option value="em_tribunal">Em Tribunal</option>
                      <option value="incobravel">Incobrável</option>
                    </select>
                    <label for="numeroRecibo{{ doc.id }}" class="form-label">Nº Recibo / NC (opcional)</label>
                    <input type="text" name="numero_recibo" id="numeroRecibo{{ doc.id }}" class="form-control" placeholder="Ex: Recibo #1234">
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Salvar</button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        {% endfor %}
      {% else %}
        <p>Nenhum documento pendente encontrado.</p>
      {% endif %}
    </div>
  </div>
</div>
{% endblock %}

{% if request.args.get('modal') %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    var modalId = "modalInv{{ request.args.get('modal') }}";
    var myModalEl = document.getElementById(modalId);
    if(myModalEl){
        var myModal = new bootstrap.Modal(myModalEl);
        myModal.show();
    }
});
</script>
{% endif %}


--------------------------------------------------------------------------------
-- Conteúdo do ficheiro: C:\Python\AdGest\app\templates\accounting\edit_documento.html --
{% extends "base.html" %}
{% block title %}Editar Documento #{{ doc.numero or doc.id }}{% endblock %}

{% block content %}
<div class="container my-4">
  <div class="card">
    <!-- Cabeçalho do Card -->
    <div class="card-header bg-primary text-white">
      <h5 class="card-title mb-0">Editar Documento #{{ doc.numero or doc.id }}</h5>
    </div>
    <!-- Corpo do Card com o Formulário -->
    <div class="card-body">
      <form method="POST" action="{{ url_for('accounting.edit_documento', doc_id=doc.id) }}">
        {{ form.hidden_tag() }}
        <!-- Linha 1: Número e Tipo -->
        <div class="row mb-3">
          <div class="col-md-6">
            <label for="{{ form.numero.id }}" class="form-label">Número</label>
            {{ form.numero(class="form-control") }}
          </div>
          <div class="col-md-6">
            <label for="{{ form.tipo.id }}" class="form-label">Tipo</label>
            {{ form.tipo(class="form-select") }}
          </div>
        </div>
        <!-- Linha 2: Datas (Data de Emissão e Data de Vencimento) -->
        <div class="row mb-3">
          <div class="col-md-6">
            <label for="{{ form.data_emissao.id }}" class="form-label">Data de Emissão</label>
            {{ form.data_emissao(class="form-control", type="date") }}
          </div>
          <div class="col-md-6">
            <label for="{{ form.data_vencimento.id }}" class="form-label">Data de Vencimento</label>
            {{ form.data_vencimento(class="form-control", type="date") }}
          </div>
        </div>
        <!-- Linha 3: Valor e Advogado -->
        <div class="row mb-3">
          <div class="col-md-6">
            <label for="{{ form.valor.id }}" class="form-label">Valor</label>
            {{ form.valor(class="form-control") }}
          </div>
          <div class="col-md-6">
            <label for="{{ form.advogado.id }}" class="form-label">Advogado</label>
            {{ form.advogado(class="form-control") }}
          </div>
        </div>
        <!-- Linha 4: Status -->
        <div class="mb-3">
          <label for="{{ form.status.id }}" class="form-label">Status</label>
          {{ form.status(class="form-select") }}
        </div>
        <!-- Linha 5: Descrição -->
        <div class="mb-3">
          <label for="{{ form.historico.id }}" class="form-label">Descrição</label>
          {{ form.historico(class="form-control", rows="2") }}
        </div>
        <!-- Botões do Rodapé -->
        <div class="d-flex justify-content-end">
          <!-- Botão Voltar: redireciona para a página de detalhes, reabrindo o modal -->
          <a href="{{ url_for('accounting.contabilidade_cliente', client_id=doc.client_id, modal=doc.id) }}" class="btn btn-secondary me-2">Voltar</a>
          <!-- Botão Salvar: envia o formulário -->
          <button type="submit" class="btn btn-primary">Salvar Alterações</button>
        </div>
      </form>
    </div>
  </div>
</div>
{% endblock %}

--------------------------------------------------------------------------------
-- Conteúdo do ficheiro: C:\Python\AdGest\app\templates\accounting\manage_invoices.html --
{% extends "base.html" %}
{% block title %}Contabilidade{% endblock %}

{% block content %}
<div class="container-fluid">

  <!-- Cabeçalho com Título e Botões -->
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h2 class="m-0">Contabilidade</h2>
    <div>
      <!-- Botão Inserir: abre o formulário manual -->
      <button class="btn btn-outline-primary me-2" type="button" data-bs-toggle="collapse" data-bs-target="#collapseInserir">
        Inserir
      </button>
      <!-- Botão CSV para importação -->
      <form method="POST" action="{{ url_for('accounting.upload_csv') }}" enctype="multipart/form-data" class="d-inline-block">
        {{ form.csrf_token }}
        <label for="arquivo" class="btn btn-outline-primary me-2">CSV</label>
        <input type="file" name="csv_file" id="arquivo" class="d-none" onchange="this.form.submit()">
      </form>
      <!-- Botão Relatórios -->
      <a href="{{ url_for('accounting.relatorio_contabilidade', tipo=request.args.get('tipo', ''), data_emissao=request.args.get('data_emissao', ''), advogado=request.args.get('advogado', ''), cliente=request.args.get('cliente', ''), status=request.args.get('status', ''), dias_atraso=request.args.get('dias_atraso', ''), numero_cliente=request.args.get('numero_cliente', ''), ordenar_por=request.args.get('ordenar_por', 'created_at_desc')) }}" class="btn btn-outline-secondary">Relatórios</a>
    </div>
  </div>

  <!-- Formulário de Inserção Manual (oculto por padrão) -->
  <div class="collapse mb-3" id="collapseInserir">
    <div class="card card-body">
      <form method="POST" action="{{ url_for('accounting.add_invoice') }}">
        {{ form.hidden_tag() }}
        
        <!-- Linha para selecionar cliente existente ou informar novo -->
        <div class="row mb-3">
          <div class="col-md-6">
            {{ form.client_existing.label(class="form-label") }}
            {{ form.client_existing(class="form-control") }}
          </div>
          <div class="col-md-6">
            {{ form.client_new.label(class="form-label") }}
            {{ form.client_new(class="form-control", placeholder="Informe novo cliente, se não existir") }}
          </div>
        </div>
        
        <!-- Linha para os dados básicos da fatura -->
        <div class="row mb-3">
          <div class="col-md-3">
            {{ form.numero.label(class="form-label") }}
            {{ form.numero(class="form-control") }}
          </div>
          <div class="col-md-3">
            {{ form.tipo.label(class="form-label") }}
            {{ form.tipo(class="form-select") }}
          </div>
          <div class="col-md-3">
            {{ form.data_emissao.label(class="form-label") }}
            {{ form.data_emissao(class="form-control", type="date") }}
          </div>
          <div class="col-md-3">
            {{ form.valor.label(class="form-label") }}
            {{ form.valor(class="form-control") }}
          </div>
        </div>
        
        <!-- Linha para dados adicionais -->
        <div class="row mb-3">
          <div class="col-md-4">
            {{ form.advogado.label(class="form-label") }}
            {{ form.advogado(class="form-control", placeholder="Nome do Advogado") }}
          </div>
          <div class="col-md-4">
            {{ form.status.label(class="form-label") }}
            {{ form.status(class="form-select") }}
          </div>
          <div class="col-md-4">
            {{ form.data_vencimento.label(class="form-label") }}
            {{ form.data_vencimento(class="form-control", type="date") }}
          </div>
        </div>
        
        <!-- Campo para Descrição -->
        <div class="mb-3">
          <label class="form-label" for="{{ form.historico.id }}">Descrição</label>
          {{ form.historico(class="form-control", rows="2") }}
        </div>
        
        <button type="submit" class="btn btn-primary">Salvar</button>
      </form>
    </div>
  </div>

  <!-- Barra de Filtros -->
  <form method="GET" class="row gx-2 gy-2 align-items-end mb-3">
    <div class="col-auto">
      <label for="tipo" class="form-label mb-0">Tipo</label>
      <select name="tipo" id="tipo" class="form-select">
        <option value="">Todos</option>
        <option value="fatura">Fatura</option>
        <option value="despesa">Despesa</option>
      </select>
    </div>
    <div class="col-auto">
      <label for="data_emissao" class="form-label mb-0">Data</label>
      <input type="date" name="data_emissao" id="data_emissao" class="form-control">
    </div>
    <div class="col-auto">
      <label for="advogado" class="form-label mb-0">Advogado</label>
      <input type="text" name="advogado" id="advogado" class="form-control" placeholder="Advogado">
    </div>
    <div class="col-auto">
      <label for="cliente" class="form-label mb-0">Cliente</label>
      <input type="text" name="cliente" id="cliente" class="form-control" placeholder="Cliente">
    </div>
    <div class="col-auto">
      <label for="status" class="form-label mb-0">Status</label>
      <select name="status" id="status" class="form-select">
        <option value="">Todos</option>
        <option value="pendente">Pendente</option>
        <option value="paga">Pago</option>
        <option value="tentativa_cobranca">Tentativa de Cobrança</option>
        <option value="em_tribunal">Em Tribunal</option>
        <option value="incobravel">Incobrável</option>
      </select>      
    </div>
    <div class="col-auto">
      <label for="dias_atraso" class="form-label mb-0">Dias Atraso</label>
      <input type="number" name="dias_atraso" id="dias_atraso" class="form-control" placeholder="Ex: 30">
    </div>
    <div class="col-auto">
      <label for="numero_cliente" class="form-label mb-0">Nº Cliente</label>
      <input type="text" name="numero_cliente" id="numero_cliente" class="form-control" placeholder="Número de Cliente">
    </div>
    <!-- Novo campo Ordenar por -->
    <div class="col-auto">
      <label for="ordenar_por" class="form-label mb-0">Ordenar por</label>
      <select name="ordenar_por" id="ordenar_por" class="form-select">
        <option value="created_at_desc" {% if ordenar_por=='created_at_desc' %}selected{% endif %}>Data de Criação (Desc)</option>
        <option value="data_emissao_asc" {% if ordenar_por=='data_emissao_asc' %}selected{% endif %}>Data de Emissão (Asc)</option>
        <option value="data_emissao_desc" {% if ordenar_por=='data_emissao_desc' %}selected{% endif %}>Data de Emissão (Desc)</option>
        <option value="data_vencimento_asc" {% if ordenar_por=='data_vencimento_asc' %}selected{% endif %}>Data de Vencimento (Asc)</option>
        <option value="data_vencimento_desc" {% if ordenar_por=='data_vencimento_desc' %}selected{% endif %}>Data de Vencimento (Desc)</option>
        <option value="valor_asc" {% if ordenar_por=='valor_asc' %}selected{% endif %}>Valor (Asc)</option>
        <option value="valor_desc" {% if ordenar_por=='valor_desc' %}selected{% endif %}>Valor (Desc)</option>
      </select>
    </div>
    <div class="col-auto">
      <button type="submit" class="btn btn-primary">Filtrar</button>
    </div>
  </form>
  
  <!-- Tabela de Documentos -->
  <div class="table-responsive">
    <table class="table table-bordered table-hover align-middle">
      <thead class="table-light">
        <tr>
          <th>Doc</th>
          <th>Tipo</th>
          <th>Data Emissão</th>
          <th>Nº Cliente</th>
          <th>Status</th>
          <th>Advogado</th>
          <th>Cliente</th>
          <th>Valor</th>
          <th>Dias Atraso</th>
          <th>Ações</th>
        </tr>
      </thead>
      <tbody>
        {% for inv in invoices %}
          <tr class="{% if inv.dias_atraso > 0 and inv.status_cobranca != 'paga' %}table-danger{% endif %}">
            <td>{{ inv.numero or inv.id }}</td>
            <td>{{ inv.tipo }}</td>
            <td>{{ inv.data_emissao.strftime('%d/%m/%Y') if inv.data_emissao else 'N/A' }}</td>
            <td>{{ inv.numero_cliente if inv.numero_cliente else 'N/A' }}</td>
            <td>{{ inv.status_cobranca }}</td>
            <td>{{ inv.advogado or 'N/A' }}</td>
            <td>{{ inv.client.name }}</td>
            <td>{{ inv.valor }} €</td>
            <td>{{ inv.dias_atraso if inv.dias_atraso > 0 else '-' }}</td>
            <td>
              <!-- Botão Detalhes -->
              <button class="btn btn-sm btn-info" data-bs-toggle="modal" data-bs-target="#modalInv{{ inv.id }}">
                Detalhes
              </button>
              <!-- Botão Alterar Status -->
              <button class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#modalStatus{{ inv.id }}">
                <i class="fa fa-exchange-alt"></i> Alterar Status: {{ inv.status_cobranca }}
              </button>
            </td>
          </tr>

          <!-- Modal de Detalhes -->
          <div class="modal fade" id="modalInv{{ inv.id }}" tabindex="-1">
            <div class="modal-dialog modal-lg">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Detalhes do Documento #{{ inv.numero or inv.id }}</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                  <p><strong>Cliente:</strong> {{ inv.client.name }}</p>
                  <p><strong>Nº Cliente:</strong> {{ inv.numero_cliente if inv.numero_cliente else 'N/A' }}</p>
                  <p><strong>Advogado:</strong> {{ inv.advogado or 'N/A' }}</p>
                  <p><strong>Data Emissão:</strong> {% if inv.data_emissao %}{{ inv.data_emissao.strftime('%d/%m/%Y') }}{% else %}N/A{% endif %}</p>
                  <p><strong>Data Vencimento:</strong> {% if inv.data_vencimento %}{{ inv.data_vencimento.strftime('%d/%m/%Y') }}{% else %}N/A{% endif %}</p>
                  <p><strong>Valor:</strong> {{ inv.valor }} €</p>
                  <p><strong>Status:</strong> {{ inv.status_cobranca }}</p>
                  <hr>
                  <p><strong>Descrição:</strong></p>
                  <pre>{{ inv.historico or inv.details }}</pre>
                </div>
                <div class="modal-footer">
                  <!-- Botão para editar o documento -->
                  <a href="{{ url_for('accounting.edit_documento', doc_id=inv.id) }}" class="btn btn-secondary">Editar Documento</a>
                  <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Fechar</button>
                </div>
              </div>
            </div>
          </div>

          <!-- Modal para Alterar Status -->
          <div class="modal fade" id="modalStatus{{ inv.id }}" tabindex="-1" aria-labelledby="modalStatusLabel{{ inv.id }}" aria-hidden="true">
            <div class="modal-dialog">
              <div class="modal-content">
                <form method="POST" action="{{ url_for('accounting.alterar_status_documento', doc_id=inv.id) }}">
                  <div class="modal-header">
                    <h5 class="modal-title" id="modalStatusLabel{{ inv.id }}">Alterar Status do Documento #{{ inv.numero or inv.id }}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <label for="statusSelect{{ inv.id }}" class="form-label">Novo Status</label>
                    <select name="status" id="statusSelect{{ inv.id }}" class="form-select mb-3">
                      <option value="paga">Pago</option>
                      <option value="recibo">Recibo</option>
                      <option value="nota_credito">Nota de Crédito</option>
                      <option value="tentativa_cobranca">Tentativa de Cobrança</option>
                      <option value="em_tribunal">Em Tribunal</option>
                      <option value="incobravel">Incobrável</option>
                    </select>
                    <label for="numeroRecibo{{ inv.id }}" class="form-label">Nº Recibo / NC (opcional)</label>
                    <input type="text" name="numero_recibo" id="numeroRecibo{{ inv.id }}" class="form-control" placeholder="Ex: Recibo #1234">
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Salvar</button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        {% endfor %}
      </tbody>      
    </table>
  </div>
</div>
{% endblock %}

--------------------------------------------------------------------------------
-- Conteúdo do ficheiro: C:\Python\AdGest\app\templates\accounting\preview_csv.html --
{% extends "base.html" %}
{% block title %}Pré-visualização CSV{% endblock %}

{% block content %}
<div class="container my-4">
  <h2>Pré-visualização dos Registros Importados</h2>
  {% if registros %}
    <table class="table table-bordered">
      <thead>
        <tr>
          {% for col in registros[0].keys() %}
            <th>{{ col }}</th>
          {% endfor %}
        </tr>
      </thead>
      <tbody>
        {% for row in registros %}
          <tr>
            {% for col in row.keys() %}
              <td>{{ row[col] }}</td>
            {% endfor %}
          </tr>
        {% endfor %}
      </tbody>
    </table>
    <form method="POST" action="{{ url_for('accounting.confirm_csv_import') }}">
      <button type="submit" class="btn btn-success">Confirmar Importação</button>
    </form>
  {% else %}
    <p>Nenhum registro para exibir.</p>
  {% endif %}
</div>
{% endblock %}

--------------------------------------------------------------------------------
-- Conteúdo do ficheiro: C:\Python\AdGest\app\templates\accounting\relatorio_contabilidade.html --
{% extends "base.html" %}
{% block title %}Relatório de Contabilidade{% endblock %}

{% block content %}
<div class="container my-4">
  <h2 class="mb-3">Relatório de Contabilidade</h2>
  
  <div class="mb-3">
    <p><strong>Total de Documentos:</strong> {{ documentos|length }}</p>
    <p><strong>Valor Total:</strong> {{ total_valor }} €</p>
    <p><strong>Valor Pago:</strong> {{ total_paid }} €</p>
    <p><strong>Valor Não Pago:</strong> {{ total_unpaid }} €</p>
  </div>
  
  <div class="mb-3">
    <h4>Filtros Aplicados:</h4>
    <ul>
      {% for key, value in filters.items() if value %}
        <li><strong>{{ key|capitalize }}:</strong> {{ value }}</li>
      {% endfor %}
    </ul>
  </div>
  
  <table class="table table-bordered">
    <thead>
      <tr>
        <th>Doc</th>
        <th>Tipo</th>
        <th>Data Emissão</th>
        <th>Nº Cliente</th>
        <th>Status</th>
        <th>Advogado</th>
        <th>Cliente</th>
        <th>Valor</th>
      </tr>
    </thead>
    <tbody>
      {% for doc in documentos %}
        <tr>
          <td>{{ doc.numero or doc.id }}</td>
          <td>{{ doc.tipo }}</td>
          <td>{% if doc.data_emissao %}{{ doc.data_emissao.strftime('%d/%m/%Y') }}{% else %}N/A{% endif %}</td>
          <td>{{ doc.numero_cliente if doc.numero_cliente else 'N/A' }}</td>
          <td>{{ doc.status_cobranca }}</td>
          <td>{{ doc.advogado or 'N/A' }}</td>
          <td>{{ doc.client.name }}</td>
          <td>{{ doc.valor }} €</td>
        </tr>
      {% endfor %}
    </tbody>
  </table>
  
  <button onclick="window.print()" class="btn btn-primary">Imprimir Relatório</button>
</div>
{% endblock %}

--------------------------------------------------------------------------------
-- Conteúdo do ficheiro: C:\Python\AdGest\app\templates\accounting\upload_csv.html --
{% extends "base.html" %}
{% block title %}Importar CSV{% endblock %}

{% block content %}
<div class="container my-4">
  <h2>Importar Documentos via CSV</h2>
  <form method="POST" enctype="multipart/form-data">
    {{ form.hidden_tag() }}
    <div class="mb-3">
      {{ form.csv_file.label(class="form-label") }}
      {{ form.csv_file(class="form-control") }}
    </div>
    <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
  </form>
</div>
{% endblock %}

--------------------------------------------------------------------------------

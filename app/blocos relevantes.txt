MODELOS:

class Assunto(db.Model):
    __tablename__ = 'assuntos'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)  # Dono
    client_id = db.Column(db.Integer, db.ForeignKey('clients.id'), nullable=False)
    nome_assunto = db.Column(db.String(100), nullable=False)
    due_date = db.Column(db.Date, nullable=True)
    sort_order = db.Column(db.Integer, default=0)
    horas_assunto = db.Column(db.Float, default=0.0)
    is_completed = db.Column(db.Boolean, default=False)
    is_billed = db.Column(db.Boolean, default=False)
    completed_by = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=True)

    tarefas = db.relationship('Tarefa', backref='assunto', cascade="all, delete-orphan", lazy='dynamic')
    shared_with = db.relationship(
        'User',
        secondary=shared_assuntos,
        backref=db.backref('shared_assuntos', lazy='dynamic', overlaps="assuntos_compartilhados,compartilhados"),
        lazy='dynamic',
        overlaps="assuntos_compartilhados,compartilhados"
    )

'''''''''''''''
''''''''''''''

class Tarefa(db.Model):
    __tablename__ = 'tarefas'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    assunto_id = db.Column(db.Integer, db.ForeignKey('assuntos.id'), nullable=False)
    nome_tarefa = db.Column(db.String(100), nullable=False)
    descricao = db.Column(db.String(200), nullable=True)
    due_date = db.Column(db.Date, nullable=True)
    sort_order = db.Column(db.Integer, default=0)
    is_completed = db.Column(db.Boolean, default=False)
    horas = db.Column(db.Float, default=0.0)
    is_billed = db.Column(db.Boolean, default=False)
    data_conclusao = db.Column(db.Date, nullable=True)
    completed_by = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=True)

    user = db.relationship("User", backref="tarefas_criadas", foreign_keys=lambda: [Tarefa.__table__.c.user_id])

    def __repr__(self):
        return f'<Tarefa {self.nome_tarefa} (Assunto: {self.assunto.nome_assunto if self.assunto else "N/A"})>'


'''''''''''
'''''''''''''''


@main.route('/assunto/toggle_status/<int:assunto_id>', methods=['POST'])
@login_required
def toggle_status_assunto(assunto_id):
    assunto = Assunto.query.get_or_404(assunto_id)
    try:
        assunto.is_completed = not assunto.is_completed
        if assunto.is_completed:
            assunto.data_conclusao = datetime.utcnow().date()
            assunto.completed_by = current_user.id
            acao = "concluído"
            # Marca todas as tarefas como concluídas também
            for tarefa in assunto.tarefas:
                tarefa.is_completed = True
                tarefa.data_conclusao = datetime.utcnow().date()
                tarefa.completed_by = current_user.id
        else:
            assunto.data_conclusao = None
            assunto.completed_by = None
            acao = "reaberto"
        db.session.commit()
        flash('Status do assunto atualizado!', 'success')
        
        # Notifica os envolvidos (criador e usuários partilhados, exceto o atual)
        envolvidos = set()
        envolvidos.add(assunto.user)
        envolvidos.update(assunto.shared_with.all() if hasattr(assunto.shared_with, 'all') else assunto.shared_with)
        for user in envolvidos:
            if user.id != current_user.id:
                mensagem = f"{current_user.nickname} marcou o assunto '{assunto.nome_assunto}' como {acao}."
                link = url_for('main.assunto_info', assunto_id=assunto.id) if 'assunto_info' in current_app.jinja_env.list_templates() else url_for('main.dashboard')
                criar_notificacao(user.id, "update", mensagem, link)
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f'Erro ao alterar status do assunto: {str(e)}')
        flash(f'Erro ao alterar status do assunto: {str(e)}', 'danger')
    return redirect(url_for('main.dashboard'))

''''
''''''''

@main.route('/tarefa/toggle_status/<int:tarefa_id>', methods=['POST'])
@login_required
def toggle_status_tarefa(tarefa_id):
    tarefa = Tarefa.query.get_or_404(tarefa_id)
    try:
        tarefa.is_completed = not tarefa.is_completed
        if tarefa.is_completed:
            tarefa.data_conclusao = datetime.utcnow().date()
            tarefa.completed_by = current_user.id
            acao = "concluída"
        else:
            tarefa.data_conclusao = None
            tarefa.completed_by = None
            acao = "reaberta"
        db.session.commit()
        flash('Status da tarefa atualizado!', 'success')
        
        notificados = set()
        # Adiciona os usuários compartilhados do assunto
        assunto_users = tarefa.assunto.shared_with.all() if hasattr(tarefa.assunto.shared_with, 'all') else tarefa.assunto.shared_with
        for user in assunto_users:
            notificados.add(user)
        # Adiciona o dono do assunto
        notificados.add(tarefa.assunto.user)
        # Remove o usuário que executou a ação
        notificados = [user for user in notificados if user.id != current_user.id]
        
        for user in notificados:
            mensagem = f"{current_user.nickname} marcou a tarefa '{tarefa.nome_tarefa}' como {acao}."
            link = url_for('main.tarefa_info', tarefa_id=tarefa.id) if 'tarefa_info' in current_app.jinja_env.list_templates() else url_for('main.dashboard')
            criar_notificacao(user.id, "update", mensagem, link)
            
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f'Erro ao alterar status da tarefa: {str(e)}')
        flash(f'Erro ao alterar status da tarefa: {str(e)}', 'danger')
    return redirect(url_for('main.dashboard'))


@main.route('/billing', methods=['GET', 'POST'])
@login_required
def billing():
    if request.method == "POST":
        selected_items = request.form.getlist('items')
        if not selected_items:
            flash("Nenhum item selecionado.", "warning")
            return redirect(url_for('main.billing'))
        
        # Agrupar os itens selecionados por cliente
        client_groups = {}
        for sel in selected_items:
            t, id_str = sel.split('-')
            item_id = int(id_str)
            if t == 'assunto':
                item = Assunto.query.get(item_id)
                client_id = item.client_id
                group = client_groups.setdefault(client_id, {"subjects": set(), "tasks": set(), "prazos": set()})
                group["subjects"].add(item_id)
            elif t == 'tarefa':
                item = Tarefa.query.get(item_id)
                client_id = item.assunto.client_id
                group = client_groups.setdefault(client_id, {"subjects": set(), "tasks": set(), "prazos": set()})
                group["tasks"].add(item_id)
            elif t == 'prazo':
                item = PrazoJudicial.query.get(item_id)
                client_id = item.client_id
                group = client_groups.setdefault(client_id, {"subjects": set(), "tasks": set(), "prazos": set()})
                group["prazos"].add(item_id)
            else:
                flash("Tipo de item inválido.", "danger")
                return redirect(url_for('main.billing'))
        
        for client_id, items in client_groups.items():
            total_hours = 0
            details_lines = []
            # Processar Assuntos selecionados – incluir todas as tarefas deste assunto
            for subj_id in items["subjects"]:
                subj = Assunto.query.get(subj_id)
                subj.is_billed = True
                details_lines.append(f"Assunto: {subj.nome_assunto}")
                registros_assunto = HoraAdicao.query.filter_by(item_type='assunto', item_id=subj.id).all()
                for reg in registros_assunto:
                    user = User.query.get(reg.user_id)
                    details_lines.append(
                        f"  [Assunto] Horas adicionadas: {reg.horas_adicionadas}h por usuário {user.username} em {reg.timestamp.strftime('%d/%m/%Y %H:%M')}"
                    )
                for task in subj.tarefas:
                    if task.is_completed and not task.is_billed:
                        task.is_billed = True
                        total_hours += task.horas
                        completion_date = task.data_conclusao.strftime('%d/%m/%Y') if task.data_conclusao else "N/A"
                        registros_tarefa = HoraAdicao.query.filter_by(item_type='tarefa', item_id=task.id).all()
                        detalhe_tarefa = f"  Tarefa: {task.nome_tarefa}, Horas: {task.horas}h, Concluída em: {completion_date}"
                        for reg in registros_tarefa:
                            user = User.query.get(reg.user_id)
                            detalhe_tarefa += f"\n     [Tarefa] Horas adicionadas: {reg.horas_adicionadas}h por usuário {user.username} em {reg.timestamp.strftime('%d/%m/%Y %H:%M')}"
                        details_lines.append(detalhe_tarefa)
            
            # Processar Tarefas selecionadas individualmente (evitando duplicidade)
            for task_id in items["tasks"]:
                task = Tarefa.query.get(task_id)
                if task.assunto.id in items["subjects"]:
                    continue
                if task.is_completed and not task.is_billed:
                    task.is_billed = True
                    total_hours += task.horas
                    completion_date = task.data_conclusao.strftime('%d/%m/%Y') if task.data_conclusao else "N/A"
                    registros_tarefa = HoraAdicao.query.filter_by(item_type='tarefa', item_id=task.id).all()
                    detalhe_tarefa = f"Tarefa: {task.nome_tarefa}, Horas: {task.horas}h, Concluída em: {completion_date}"
                    for reg in registros_tarefa:
                        user = User.query.get(reg.user_id)
                        detalhe_tarefa += f"\n     [Tarefa] Horas adicionadas: {reg.horas_adicionadas}h por usuário {user.username} em {reg.timestamp.strftime('%d/%m/%Y %H:%M')}"
                    details_lines.append(detalhe_tarefa)
            
            # Processar Prazos selecionados
            for prazo_id in items["prazos"]:
                prazo = PrazoJudicial.query.get(prazo_id)
                prazo.is_billed = True
                total_hours += prazo.horas
                data_conclusao = prazo.data_conclusao.strftime('%d/%m/%Y') if prazo.data_conclusao else "N/A"
                detalhe_prazo = f"Prazo: {prazo.assunto} (Processo: {prazo.processo}), Horas: {prazo.horas}h, Concluído em: {data_conclusao}"
                registros_prazo = HoraAdicao.query.filter_by(item_type='prazo', item_id=prazo.id).all()
                for reg in registros_prazo:
                    user = User.query.get(reg.user_id)
                    detalhe_prazo += f"\n     [Prazo] Horas adicionadas: {reg.horas_adicionadas}h por usuário {user.username} em {reg.timestamp.strftime('%d/%m/%Y %H:%M')}"
                details_lines.append(detalhe_prazo)
            
            nota = NotaHonorarios(
                user_id=current_user.id,
                client_id=client_id,
                total_hours=total_hours,
                details="\n".join(details_lines),
                is_confirmed=True
            )
            db.session.add(nota)
        db.session.commit()
        flash("Notas de honorários geradas com sucesso!", "success")
        return redirect(url_for('main.billing'))
    else:
        # GET: incluir todos os itens (próximos de faturamento), sejam do usuário ou compartilhados
        billable_assuntos = Assunto.query.filter(
            Assunto.is_completed == True,
            Assunto.is_billed == False,
            or_(
                Assunto.user_id == current_user.id,
                Assunto.shared_with.any(id=current_user.id),
                Assunto.completed_by == current_user.id
            )
        ).all()
        grouped_data = {}
        for a in billable_assuntos:
            c_id = a.client_id
            if c_id not in grouped_data:
                grouped_data[c_id] = {"client": a.client, "assuntos": {}, "prazos": []}
            # Inclua todas as tarefas concluídas do assunto
            tasks = Tarefa.query.filter(
                Tarefa.assunto_id == a.id,
                Tarefa.is_completed == True,
                Tarefa.is_billed == False
            ).all()
            grouped_data[c_id]["assuntos"][a.id] = {"assunto": a, "tarefas": tasks}
        
         # Adicionar tarefas concluídas que não foram incluídas no agrupamento por assunto       
        billable_tarefas = Tarefa.query.filter(
            Tarefa.is_completed == True,
            Tarefa.is_billed == False,
            or_(
                Tarefa.user_id == current_user.id,
                Tarefa.completed_by == current_user.id
            )
        ).all()
        for t in billable_tarefas:
            subj_id = t.assunto.id
            c_id = t.assunto.client_id
            # Se o assunto não estiver no agrupamento ou se a tarefa não estiver listada, adicione-a
            if c_id not in grouped_data:
                grouped_data[c_id] = {"client": t.assunto.client, "assuntos": {}, "prazos": []}
            if subj_id not in grouped_data[c_id]["assuntos"]:
                grouped_data[c_id]["assuntos"][subj_id] = {"assunto": t.assunto, "tarefas": []}
            # Verifique se a tarefa já não está listada (evita duplicidade)
            if t not in grouped_data[c_id]["assuntos"][subj_id]["tarefas"]:
                grouped_data[c_id]["assuntos"][subj_id]["tarefas"].append(t)


        billable_prazos = PrazoJudicial.query.filter(
            PrazoJudicial.status == True,
            PrazoJudicial.is_billed == False,
            or_(
                PrazoJudicial.user_id == current_user.id,
                PrazoJudicial.shared_with.any(id=current_user.id),
                PrazoJudicial.completed_by == current_user.id
            )
        ).all()
        for p in billable_prazos:
            c_id = p.client_id
            if c_id not in grouped_data:
                grouped_data[c_id] = {"client": p.client, "assuntos": {}, "prazos": []}
            grouped_data[c_id]["prazos"].append(p)
        
        # Mostrar apenas as notas emitidas pelo usuário atual
        nota_honorarios = NotaHonorarios.query.filter_by(user_id=current_user.id).order_by(NotaHonorarios.created_at.desc()).all()
        return render_template('billing_grouped.html', grouped_data=grouped_data, nota_honorarios=nota_honorarios)




''''''''''''
'''''''''''
TEMPLATE BILLING GROUPED

{% extends "base.html" %}
{% block title %}Notas de Honorários{% endblock %}
{% block content %}
<div class="text-center mb-4">
  <h2>Notas de Honorários</h2>
</div>
<div class="row">
  <!-- Coluna dos Itens a Processar -->
  <div class="col-md-6">
    <h3>Por Processar</h3>
    <form method="POST" id="billingForm">
      {% for client_id, group in grouped_data.items() %}
        <div class="mb-3">
          <h4>Cliente: {{ group.client.name }}</h4>
          {# Exibe os assuntos e suas tarefas #}
          {% for assunto_id, a_data in group.assuntos.items() %}
            <div class="ms-3 mb-2">
              <label class="{% if a_data.assunto.shared_with.count() > 0 %}shared-item{% endif %}">
                <input type="checkbox" name="items" value="assunto-{{ a_data.assunto.id }}" class="subject-checkbox">
                <strong>Assunto:</strong> {{ a_data.assunto.nome_assunto }} - Total Horas (tarefas): {{ a_data.tarefas|map(attribute='horas')|sum }}h
              </label>
              <!-- Link para reverter faturamento do assunto -->
              <a href="#" class="btn btn-sm btn-warning" onclick="revertItem('assunto', {{ a_data.assunto.id }}); return false;">Reverter</a>
              {% if a_data.tarefas %}
                <ul>
                  {% for tarefa in a_data.tarefas %}
                    <li>
                      <label class="{% if a_data.assunto.shared_with.count() > 0 %}shared-item{% endif %}">
                        <input type="checkbox" name="items" value="tarefa-{{ tarefa.id }}" data-subject-id="{{ a_data.assunto.id }}">
                        <strong>Tarefa:</strong> {{ tarefa.nome_tarefa }},
                        Horas: {{ tarefa.horas }}h,
                        Concluída em: {% if tarefa.data_conclusao %}{{ tarefa.data_conclusao.strftime('%d/%m/%Y') }}{% else %}N/A{% endif %}
                      </label>
                      <!-- Link para reverter faturamento da tarefa -->
                      <a href="#" class="btn btn-sm btn-warning" onclick="revertItem('tarefa', {{ tarefa.id }}); return false;">Reverter</a>
                    </li>
                  {% endfor %}
                </ul>
              {% endif %}
            </div>
          {% endfor %}
          {# Exibe os prazos do cliente #}
          {% if group.prazos %}
            <div class="ms-3 mb-2">
              <strong>Prazos:</strong>
              <ul>
                {% for prazo in group.prazos %}
                  <li>
                    <label class="{% if prazo.shared_with.count() > 0 %}shared-item{% endif %}">
                      <input type="checkbox" name="items" value="prazo-{{ prazo.id }}">
                      <strong>{{ prazo.assunto }}</strong> – Processo: {{ prazo.processo }}, Horas: {{ prazo.horas }}h,
                      Data: {% if prazo.prazo %}{{ prazo.prazo.strftime('%d/%m/%Y') }}{% else %}Sem data{% endif %}
                    </label>
                    <!-- Link para reverter faturamento do prazo -->
                    <a href="#" class="btn btn-sm btn-warning" onclick="revertItem('prazo', {{ prazo.id }}); return false;">Reverter</a>
                  </li>
                {% endfor %}
              </ul>
            </div>
          {% endif %}
        </div>
      {% endfor %}
      <button type="submit" class="btn btn-primary">Gerar Nota de Honorários</button>
    </form>
  </div>
  
  <!-- Coluna do Histórico de Notas -->
  <div class="col-md-6">
    <h3>Notas Emitidas</h3>
    {% if nota_honorarios and nota_honorarios|length > 0 %}
      <div id="billingCarousel" class="carousel slide" data-bs-interval="false">
        <div class="carousel-inner">
          {% for nota in nota_honorarios %}
            <div class="carousel-item {% if loop.first %}active{% endif %}">
              <div class="card">
                <div class="card-header">
                  Nota #{{ nota.id }} – {{ nota.client.name }}
                </div>
                <div class="card-body">
                  <p><strong>Data:</strong> {{ nota.created_at.strftime('%d/%m/%Y %H:%M') }}</p>
                  <p><strong>Total de Horas:</strong> {{ nota.total_hours }}h</p>
                  <pre style="white-space: pre-wrap;">{{ nota.details }}</pre>
                </div>
              </div>
            </div>
          {% endfor %}
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#billingCarousel" data-bs-slide="prev">
          <span class="carousel-control-prev-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Anterior</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#billingCarousel" data-bs-slide="next">
          <span class="carousel-control-next-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Próximo</span>
        </button>
      </div>
    {% else %}
      <p>Nenhuma nota emitida ainda.</p>
    {% endif %}
    <div class="mt-3">
      <a href="{{ url_for('main.billing_historico') }}" class="btn btn-secondary">Ver Histórico de Notas</a>
    </div>
  </div>
</div>

<script>
  // Gera a URL de base para reverter, usando um valor dummy para item_id e um placeholder para item_type
  var revertBillingUrlTemplate = "{{ url_for('main.revert_billing', item_type='__ITEM_TYPE__', item_id=9999999) }}";
  // Gera a URL para o billing, para redirecionamento após a operação
  var billingUrl = "{{ url_for('main.billing') }}";
  
  // Script de seleção automática de tarefas relacionadas ao marcar um assunto
  document.addEventListener('DOMContentLoaded', function() {
      document.querySelectorAll('.subject-checkbox').forEach(function(subjectCheckbox) {
          subjectCheckbox.addEventListener('change', function() {
              var subjectId = this.value.split('-')[1];
              document.querySelectorAll('input[type="checkbox"][name="items"][data-subject-id="' + subjectId + '"]').forEach(function(taskCheckbox) {
                  taskCheckbox.checked = subjectCheckbox.checked;
              });
          });
      });
  });
  
  // Função para reverter um item via fetch (sem CSRF header)
  function revertItem(itemType, itemId) {
      // Substitui os placeholders na URL com os valores reais
      var url = revertBillingUrlTemplate.replace("__ITEM_TYPE__", itemType).replace("9999999", itemId);
      fetch(url, { method: "POST" })
          .then(function(response) {
              if(response.ok) {
                  window.location.href = billingUrl;
              } else {
                  alert("Erro ao reverter o faturamento.");
              }
          })
          .catch(function(error) {
              alert("Erro ao reverter o faturamento.");
          });
  }
  </script>
  
{% endblock %}

  


==== BLOCO DE ROTAS EXTRAÍDO ====
Arquivo: app/routes.py
Bloco: ROTAS DE AUTENTICAÇÃO (Linhas 38 a 95)
================================================================================


@main.route('/profile')
@login_required
def profile():
    return render_template('profile.html', user=current_user)

@main.route('/register', methods=['GET', 'POST'])
@login_required
@admin_required
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        hashed_password = generate_password_hash(form.password.data)
        user = User(
            username=form.username.data,
            nickname=form.nickname.data,
            email=form.email.data,
            password=hashed_password,
            role=form.role.data  # O papel é definido conforme a seleção do admin
        )
        db.session.add(user)
        try:
            db.session.commit()
            flash('Usuário criado com sucesso!', 'success')
            return redirect(url_for('main.index'))
        except IntegrityError:
            db.session.rollback()
            flash('O nome de usuário já está em uso. Por favor, escolha outro.', 'danger')
    else:
        # Se houver erros, podemos flashá-los ou exibi-los no template
        if form.errors:
            for field, errors in form.errors.items():
                for error in errors:
                    flash(f"Erro no campo {field}: {error}", 'danger')
    return render_template('register.html', form=form)


@main.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and check_password_hash(user.password, form.password.data):
            login_user(user)
            flash('Login realizado com sucesso!', 'success')
            return redirect(url_for('main.index'))
        else:
            flash('Usuário ou senha incorretos.', 'danger')
    return render_template('login.html', form=form)

@main.route('/logout')
@login_required
def logout():
    logout_user()
    flash('Saiu do sistema.', 'info')
    return redirect(url_for('main.login'))

================================================================================

==== ARQUIVOS RELACIONADOS ====

-- Arquivo: app/templates\edit_profile.html --
{% extends "base.html" %}
{% block title %}Editar Perfil{% endblock %}

{% block content %}
<div class="container my-4">
  <h2>Editar Perfil</h2>
  <form method="POST" action="{{ url_for('main.edit_profile') }}">
    {{ form.hidden_tag() }}
    <div class="mb-3">
      {{ form.nickname.label(class="form-label") }}
      {{ form.nickname(class="form-control") }}
    </div>
    <div class="mb-3">
      {{ form.email.label(class="form-label") }}
      {{ form.email(class="form-control") }}
    </div>
    <div class="mb-3">
      {{ form.profile_image.label(class="form-label") }}
      {{ form.profile_image(class="form-control") }}
      <small class="form-text text-muted">Informe o caminho ou URL da imagem.</small>
    </div>
    <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
  </form>
</div>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\login.html --
{% extends "base.html" %}
{% import "macros.html" as macros %}
{% block title %}Login{% endblock %}
{% block content %}
<div class="row justify-content-center">
  <div class="col-md-6">
    <h2 class="mb-3">Login</h2>
    <form method="POST" class="needs-validation" novalidate>
      {{ form.hidden_tag() }}
      {{ macros.render_field(form.username) }}
      {{ macros.render_field(form.password) }}
      <div class="mb-3">
        {{ form.submit(class="btn btn-primary") }}
      </div>
    </form>
  </div>
</div>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\profile.html --
{% extends "base.html" %}
{% block title %}Perfil de {{ user.nickname }}{% endblock %}

{% block content %}
<div class="container my-4">
  <h2>Perfil de {{ user.nickname }}</h2>
  <div class="card">
    <div class="card-body">
      <p><strong>Usuário:</strong> {{ user.username }}</p>
      <p><strong>Nickname:</strong> {{ user.nickname }}</p>
      <p><strong>Email:</strong> {{ user.email }}</p>
      <p><strong>Papel:</strong> {{ user.role }}</p>
      {% if user.profile_image %}
        <img src="{{ url_for('static', filename='icons/' ~ user.profile_image) }}" alt="Imagem de perfil" class="img-thumbnail" style="max-width: 200px;">
      {% endif %}
    </div>
  </div>
  <a href="{{ url_for('main.edit_profile') }}" class="btn btn-primary mt-3">Editar Perfil</a>
</div>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/templates\register.html --
{% extends "base.html" %}
{% import "macros.html" as macros %}
{% block title %}Registrar{% endblock %}
{% block content %}
<div class="row justify-content-center">
  <div class="col-md-6">
    <h2 class="mb-3">Registrar</h2>
    {% if get_flashed_messages(category_filter=["danger"]) %}
      <div class="alert alert-danger">
        {% for message in get_flashed_messages(category_filter=["danger"]) %}
          <p>{{ message }}</p>
        {% endfor %}
      </div>
    {% endif %}
    <form method="POST">
      {{ form.hidden_tag() }}
      <div class="mb-3">
        {{ form.username.label }}<br>
        {{ form.username(class="form-control") }}
      </div>
      <div class="mb-3">
        {{ form.nickname.label }}<br>
        {{ form.nickname(class="form-control") }}
      </div>
      <div class="mb-3">
        {{ form.email.label }}<br>
        {{ form.email(class="form-control") }}
      </div>
      <div class="mb-3">
        {{ form.password.label }}<br>
        {{ form.password(class="form-control") }}
      </div>
      <div class="mb-3">
        {{ form.role.label }}<br>
        {{ form.role(class="form-control") }}
      </div>
      <button type="submit" class="btn btn-primary">{{ form.submit.label.text }}</button>
    </form>    
  </div>
</div>
{% endblock %}

--------------------------------------------------------------------------------

-- Arquivo: app/models.py --
# Usuário
class User(UserMixin, db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False)
    nickname = db.Column(db.String(10), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    profile_image = db.Column(db.String(120), default='default.jpg')
    password = db.Column(db.String(200), nullable=False)
    role = db.Column(db.String(50), default='advogado')

    __table_args__ = (db.UniqueConstraint('email', name='uq_users_email'),)

    # relacionamentos:
    assuntos_compartilhados = db.relationship(
        'Assunto',
        secondary=shared_assuntos,
        backref=db.backref('compartilhados', lazy='dynamic'),
        lazy='dynamic'
    )
    
    # Relação reversa para as associações de clientes compartilhados
    client_shares = db.relationship('ClientShare', backref='user', lazy='dynamic')
    
    def __repr__(self):
        return f'<User {self.username}>'


--------------------------------------------------------------------------------

-- Arquivo: app/forms.py --
class RegistrationForm(FlaskForm):
    username = StringField('Usuário', validators=[DataRequired(), Length(min=3, max=100)])
    nickname = StringField('Nickname', validators=[DataRequired(message="O nickname é obrigatório")])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Senha', validators=[DataRequired(), Length(min=6)])
    # Novo campo para selecionar o papel do usuário
    role = SelectField('Perfil', choices=[
        ('advogado', 'Advogado'),
        ('administrativo', 'Administrativo'),
        ('backoffice', 'Backoffice'),
        ('contabilidade', 'Contabilidade'),
        ('admin', 'Admin')
    ], validators=[DataRequired()])
    submit = SubmitField('Registrar')

class LoginForm(FlaskForm):
    username = StringField('Usuário', validators=[DataRequired()])
    password = PasswordField('Senha', validators=[DataRequired()])
    submit = SubmitField('Entrar')

--------------------------------------------------------------------------------

